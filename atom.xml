<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qing的博客</title>
  <icon>https://www.gravatar.com/avatar/5d867c494be6e0f5875fa31d100fb240</icon>
  <subtitle>欣然回首，沿途点滴皆难忘;朝花夕拾，满庭只道是芬芳</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://myqilixiang.github.io/"/>
  <updated>2020-03-12T14:09:18.414Z</updated>
  <id>http://myqilixiang.github.io/</id>
  
  <author>
    <name>Qilx</name>
    <email>1131421776@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端开发中IOC的理解</title>
    <link href="http://myqilixiang.github.io/2019/01/16/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%ADIOC%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://myqilixiang.github.io/2019/01/16/前端开发中IOC的理解/</id>
    <published>2019-01-16T10:13:14.000Z</published>
    <updated>2020-03-12T14:09:18.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前端应用在不断壮大的过程中，内部模块间的依赖可能也会随之越来越复杂，模块间的 <strong>低复用性</strong> 导致应用 <strong>难以维护</strong>，不过我们可以借助计算机领域的一些优秀的编程理念来一定程度上解决这些问题，接下来要讲述的<code>_IoC_</code> 就是其中之一。</p><h2 id="什么是-IOC"><a href="#什么是-IOC" class="headerlink" title="什么是 IOC"></a>什么是 IOC</h2><p><code>IoC</code> 的全称叫做 <code>Inversion of Control</code>，可翻译为为<strong>「控制反转」</strong> 或 <strong>「依赖倒置」</strong>，它主要包含了三个准则：</p><p>1、高层次的模块不应该依赖于低层次的模块，它们都应该依赖于抽象<br>2、抽象不应该依赖于具体实现，具体实现应该依赖于抽象<br>3、面向接口编程 而不要面向实现编程</p><p>概念总是抽象的，所以下面将以一个例子来解释上述的概念：</p><p>假设需要构建一款应用叫 <code>App</code>，它包含一个路由模块 <code>Router</code>和一个页面监控模块 <code>Track</code>，一开始可能会这么实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./modules/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> Track <span class="keyword">from</span> <span class="string">'./modules/Track'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">    <span class="keyword">this</span>.router = <span class="keyword">new</span> Router();</span><br><span class="line">    <span class="keyword">this</span>.track = <span class="keyword">new</span> Track();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.router.to(<span class="string">'home'</span>);</span><br><span class="line">      <span class="keyword">this</span>.track.tracking();</span><br><span class="line">      <span class="keyword">this</span>.options.onReady();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'path/to/App'</span>;</span><br><span class="line"><span class="keyword">new</span> App(&#123;</span><br><span class="line">  onReady() &#123;</span><br><span class="line">    <span class="comment">// do something here...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>嗯，看起来没什么问题，但是实际应用中需求是非常多变的，可能需要给路由新增功能（比如实现 <code>history</code> 模式）或者更新配置（启用 <code>history</code>, <code>new Router({ mode: &#39;history&#39; })）</code>。这就不得不在 App 内部去修改这两个模块，这是一个 <code>INNER BREAKING</code> 的操作，而对于之前测试通过了的 <code>App</code> 来说，也必须重新测试。</p><p>很明显，这不是一个好的应用结构，高层次的模块 <code>App</code>依赖了两个低层次的模块 <code>Router</code>和 <code>Track</code>，对低层次模块的修改都会影响高层次的模块<code>App</code>。那么如何解决这个问题呢，解决方案就是接下来要讲述的 <strong>依赖注入（Dependency Injection）</strong>。</p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>所谓的依赖注入，简单来说就是把高层模块所依赖的模块通过传参的方式把依赖「注入」到模块内部，上面的代码可以通过依赖注入的方式改造成如下方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">    <span class="keyword">this</span>.router = options.router;</span><br><span class="line">    <span class="keyword">this</span>.track = options.track;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.router.to(<span class="string">'home'</span>);</span><br><span class="line">      <span class="keyword">this</span>.track.tracking();</span><br><span class="line">      <span class="keyword">this</span>.options.onReady();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'path/to/App'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./modules/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> Track <span class="keyword">from</span> <span class="string">'./modules/Track'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> App(&#123;</span><br><span class="line">  router: <span class="keyword">new</span> Router(),</span><br><span class="line">  track: <span class="keyword">new</span> Track(),</span><br><span class="line">  onReady() &#123;</span><br><span class="line">    <span class="comment">// do something here...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到，通过依赖注入解决了上面所说的 <code>INNER BREAKING</code> 的问题，可以直接在 <code>App</code> 外部对各个模块进行修改而不影响内部。</p><p>是不是就万事大吉了？理想很丰满，但现实却是很骨感的，没过两天产品就给你提了一个新需求，给 <code>App</code> 添加一个分享模块<code>Share</code>。这样的话又回到了上面所提到的 <code>INNER BREAKING</code> 的问题上：你不得不对<code>App</code>模块进行修改加上一行 <code>this.share = options.share</code>，这明显不是我们所期望的。</p><p>虽然 <code>App</code>通过依赖注入的方式在一定程度上解耦了与其他几个模块的依赖关系，但是还不够彻底，其中的 <code>this.router</code> 和 <code>this.track</code>等属性其实都还是对「具体实现」的依赖，明显违背了<code>IoC</code> 思想的准则，那如何进一步抽象<code>App</code>模块呢。</p><p><strong>Talk is cheap, show you the code</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> modules = [];</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.initModules();</span><br><span class="line">      <span class="keyword">this</span>.options.onReady(<span class="keyword">this</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  initModules() &#123;</span><br><span class="line">    <span class="comment">//调用所有module的init方法</span></span><br><span class="line">    App.modules.map(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">      modules.init &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.init === <span class="string">'function'</span> &amp;&amp; <span class="built_in">module</span>.init(<span class="keyword">this</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//使用use将模块注入到App的modules数组中  可以传入数组  如果是数组的话采用递归实现</span></span><br><span class="line">  <span class="keyword">static</span> use(<span class="built_in">module</span>) &#123;</span><br><span class="line">    <span class="built_in">Array</span>.isArray(<span class="built_in">module</span>)</span><br><span class="line">      ? <span class="built_in">module</span>.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          App.use(item);</span><br><span class="line">        &#125;)</span><br><span class="line">      : App.modules.push(<span class="built_in">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过改造后 <code>App</code> 内已经没有「具体实现」了，看不到任何业务代码了，那么如何使用 <code>App</code> 来管理我们的依赖呢：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules/Router.js</span></span><br><span class="line"><span class="keyword">import</span>  Router <span class="keyword">from</span> <span class="string">'path/to/Router'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  init(app)&#123;</span><br><span class="line">    app.router=<span class="keyword">new</span> Router(app.options.router)</span><br><span class="line">    app.router.to(<span class="string">'home'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// modules/Track.js</span></span><br><span class="line"><span class="keyword">import</span>  Track <span class="keyword">from</span> <span class="string">'path/to/Track'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  init(app)&#123;</span><br><span class="line">    app.track=<span class="keyword">new</span> Track(app.options.track)</span><br><span class="line">    app.track.tracking()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'path/to/App'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./modules/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> Track <span class="keyword">from</span> <span class="string">'./modules/Track'</span>;</span><br><span class="line"></span><br><span class="line">App.use([Router,Track])</span><br><span class="line"><span class="keyword">new</span> App(&#123;</span><br><span class="line">  router:&#123;</span><br><span class="line">    mode:<span class="string">'history'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  track:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  onReady(app)&#123;</span><br><span class="line">    <span class="comment">//app.options</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以发现 <code>App</code> 模块在使用上也非常的方便，通过 <code>App.use()</code> 方法来「注入」依赖，在 <code>./modules/some-module.js</code> 中按照一定的「约定」去初始化相关配置，比如此时需要新增一个 <code>Share</code> 模块的话，无需到 <code>App</code> 内部去修改内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules/Share.js</span></span><br><span class="line"><span class="keyword">import</span> Share <span class="keyword">from</span> <span class="string">'path/to/Share'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  init(app) &#123;</span><br><span class="line">    app.share = <span class="keyword">new</span> Share();</span><br><span class="line">    app.setShare = <span class="function"><span class="params">data</span> =&gt;</span> app.share.setShare(data);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line">App.use(Share);</span><br><span class="line"><span class="keyword">new</span> App(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  onReady(app) &#123;</span><br><span class="line">    app.setShare(&#123;</span><br><span class="line">      title: <span class="string">'Hello IoC.'</span>,</span><br><span class="line">      description: <span class="string">'description here...'</span>,</span><br><span class="line">      <span class="comment">// some other data here...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>直接在 <code>App</code>外部去<code>use</code>这个 <code>Share</code>模块即可，对模块的注入和配置极为方便。</p><p>那么在<code>App</code> 内部到底做了哪些工作呢，首先从 <code>App.use</code>方法说起：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> modules = [];</span><br><span class="line">  <span class="keyword">static</span> use(<span class="built_in">module</span>) &#123;</span><br><span class="line">    <span class="built_in">Array</span>.isArray(<span class="built_in">module</span>)</span><br><span class="line">      ? <span class="built_in">module</span>.map(<span class="function"><span class="params">item</span> =&gt;</span> App.use(item))</span><br><span class="line">      : App.modules.push(<span class="built_in">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以很清楚的发现，<code>App.use</code> 做了一件非常简单的事情，就是把依赖保存在了 <code>App.modules</code> 属性中，等待后续初始化模块的时候被调用。</p><p>接下来我们看一下模块初始化方法 <code>this.initModules()</code> 具体做了什么事情：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    initModules() &#123;</span><br><span class="line">        App.modules.map(<span class="function"><span class="params">module</span> =&gt;</span> <span class="built_in">module</span>.init &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.init == <span class="string">'function'</span> &amp;&amp; <span class="built_in">module</span>.init(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现该方法同样做了一件非常简单的事情，就是遍历 <code>App.modules</code> 中所有的模块，判断模块是否包含 <code>init</code> 属性且该属性必须是一个函数，如果判断通过的话，该方法就会去执行模块的 <code>init</code> 方法并把 <code>App</code> 的实例<code>this</code> 传入其中，以便在模块中引用它。</p><p>从这个方法中可以看出，要实现一个可以被 <code>App.use()</code>的模块，就必须满足两个<strong>「约定」</strong>：</p><p>储和同步功能，带来前所未有的书写体验。特点概述：</p><p>1、模块必须包含 <code>init</code> 属性<br>2、<code>init</code> 必须是一个函数</p><p>这其实就是 <code>IoC</code> 思想中对「<strong>面向接口编程 而不要面向实现编程</strong>」这一准则的很好的体现。App 不关心模块具体实现了什么，只要满足对 <strong>接口</strong> <code>init</code> 的「约定」就可以了。</p><p>此时回去看 Router 的模块的实现就可以很容易理解为什么要怎么写了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules/Router.js</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'path/to/Router'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    init(app) &#123;</span><br><span class="line">        app.router = <span class="keyword">new</span> Router(app.options.router);</span><br><span class="line">        app.router.to(<span class="string">'home'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>App</code>模块此时应该称之为<strong>「容器」</strong>比较合适了，跟业务已经没有任何关系了，它仅仅只是提供了一些方法来辅助管理注入的依赖和控制模块如何执行。·</p><p>控制反转（<code>Inversion of Control</code>）是一种「<strong>思想</strong>」，依赖注入（<code>Dependency Injection</code>）则是这一思想的一种具体「<strong>实现方式</strong>」，而这里的 <code>App</code> 则是辅助依赖管理的一个「<strong>容器</strong>」。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;前端应用在不断壮大的过程中，内部模块间的依赖可能也会随之越来越复杂，模块间的 &lt;strong&gt;低复用性&lt;/strong&gt; 导致应用 &lt;str
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Porxy 实现vue MVVM</title>
    <link href="http://myqilixiang.github.io/2019/01/02/Porxy-%E5%AE%9E%E7%8E%B0vue-MVVM/"/>
    <id>http://myqilixiang.github.io/2019/01/02/Porxy-实现vue-MVVM/</id>
    <published>2019-01-02T02:19:52.000Z</published>
    <updated>2020-03-12T14:12:18.744Z</updated>
    
    <content type="html"><![CDATA[<p><strong>hahahha</strong><br><del>dahsdas</del> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;hahahha&lt;/strong&gt;&lt;br&gt;&lt;del&gt;dahsdas&lt;/del&gt; &lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>发布-订阅模式</title>
    <link href="http://myqilixiang.github.io/2017/08/29/JavaScript%E4%B8%AD%E7%9A%84%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://myqilixiang.github.io/2017/08/29/JavaScript中的发布-订阅模式/</id>
    <published>2017-08-29T02:48:17.000Z</published>
    <updated>2020-03-12T14:11:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>发布 — 订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。在 JavaScript开发中，我们一般用事件模型来替代传统的发布 — 订阅模式。</p><h1 id="现实中的发布-－-订阅模式"><a href="#现实中的发布-－-订阅模式" class="headerlink" title="现实中的发布 － 订阅模式"></a>现实中的发布 － 订阅模式</h1><p>不论是在程序世界里还是现实生活中，发布 — 订阅模式的应用都非常之广泛。我们先看一个现实中的例子。<br>小明最近看上了一套房子，到了售楼处之后才被告知，该楼盘的房子早已售罄。好在售楼MM告诉小明，不久后还有一些尾盘推出，开发商正在办理相关手续，手续办好后便可以购买。但到底是什么时候，目前还没有人能够知道。<br>于是小明记下了售楼处的电话，以后每天都会打电话过去询问是不是已经到了购买时间。除了小明，还有小红、小强、小龙也会每天向售楼处咨询这个问题。一个星期过后，售楼 MM 决定辞职，因为厌倦了每天回答 1000个相同内容的电话。<br>当然现实中没有这么笨的销售公司，实际上故事是这样的：小明离开之前，把电话号码留在了售楼处。售楼 MM 答应他，新楼盘一推出就马上发信息通知小明。小红、小强和小龙也是一样，他们的电话号码都被记在售楼处的花名册上，新楼盘推出的时候，售楼 MM会翻开花名册，遍历上面的电话号码，依次发送一条短信来通知他们。</p><h1 id="发布-－-订阅模式的作用"><a href="#发布-－-订阅模式的作用" class="headerlink" title="发布 － 订阅模式的作用"></a>发布 － 订阅模式的作用</h1><p>在刚刚的例子中，发送短信通知就是一个典型的发布 — 订阅模式，小明、小红等购买者都是订阅者，他们订阅了房子开售的消息。售楼处作为发布者，会在合适的时候遍历花名册上的电话号码，依次给购房者发布消息。<br>可以发现，在这个例子中使用发布 — 订阅模式有着显而易见的优点</p><ul><li>购房者不用再天天给售楼处打电话咨询开售时间，在合适的时间点，售楼处作为发布者<br>会通知这些消息订阅者。</li><li>购房者和售楼处之间不再强耦合在一起，当有新的购房者出现时，他只需把手机号码留在售楼处，售楼处不关心购房者的任何情况，不管购房者是男是女还是一只猴子。 而售楼处的任何变动也不会影响购买者，比如售楼 MM 离职，售楼处从一楼搬到二楼，这些改变都跟购房者无关，只要售楼处记得发短信这件事情。</li></ul><p>第一点说明发布 — 订阅模式可以<code>广泛应用于异步编程中</code>，这是一种替代传递回调函数的方案。比如，我们可以订阅 ajax请求的 error 、 succ 等事件。 或者如果想在动画的每一帧完成之后做一些事情，那我们可以订阅一个事件，然后在动画的每一帧完成之后发布这个事件。在异步编程中使用发布 — 订阅模式，我们就无需过多关注对象在异步运行期间的内部状态，而只需要订阅感兴趣的事件发生点。<br>第二点说明发布 — 订阅模式可以<code>取代对象之间硬编码的通知机制</code>，一个对象不用再显式地调用另外一个对象的某个接口。发布 — 订阅模式让两个对象松耦合地联系在一起，虽然不太清楚彼此的细节，但这不影响它们之间相互通信。当有新的订阅者出现时，发布者的代码不需要任何修改；同样发布者需要改变时，也不会影响到之前的订阅者。只要之前约定的事件名没有变化，就可以自由地改变它们。</p><h1 id="DOM-事件"><a href="#DOM-事件" class="headerlink" title="DOM 事件"></a>DOM 事件</h1><p>实际上，只要我们曾经在 DOM 节点上面绑定过事件函数，那我们就曾经使用过发布 — 订阅模式，来看看下面这两句简单的代码发生了什么事情：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="literal">false</span> );</span><br><span class="line"><span class="built_in">document</span>.body.click(); <span class="comment">// 模拟用户点击</span></span><br></pre></td></tr></table></figure><p>在这里需要监控用户点击 document.body 的动作，但是我们没办法预知用户将在什么时候点击。所以我们订阅 document.body 上的 click 事件，当 body 节点被点击时， body 节点便会向订阅者发布这个消息。这很像购房的例子，购房者不知道房子什么时候开售，于是他在订阅消息后等待售楼处发布消息。<br>当然我们还可以随意增加或者删除订阅者，增加任何订阅者都不会影响发布者代码的编写:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="literal">false</span> );</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">3</span>);</span><br><span class="line">&#125;, <span class="literal">false</span> );</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">4</span>);</span><br><span class="line">&#125;, <span class="literal">false</span> );</span><br><span class="line"><span class="built_in">document</span>.body.click(); <span class="comment">// 模拟用户点击</span></span><br></pre></td></tr></table></figure><p>注意，手动触发事件更好的做法是 IE下用 fireEvent ，标准浏览器下用<code>dispatchEvent</code> 实现。</p><h1 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h1><p>除了 DOM 事件，我们还会经常实现一些自定义的事件，这种依靠自定义事件完成的发布 —订阅模式可以用于任何 JavaScript代码中。<br>现在看看如何一步步实现发布 — 订阅模式。</p><ul><li>首先要指定好谁充当发布者（比如售楼处）；</li><li>然后给发布者添加一个缓存列表，用于存放回调函数以便通知订阅者（售楼处的花名册）；</li><li>最后发布消息的时候，发布者会遍历这个缓存列表，依次触发里面存放的订阅者回调函数（遍历花名册，挨个发短信）。</li></ul><p>另外，我们还可以往回调函数里填入一些参数，订阅者可以接收这些参数。这是很有必要的，比如售楼处可以在发给订阅者的短信里加上房子的单价、面积、容积率等信息，订阅者接收到这些信息之后可以进行各自的处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices=&#123;&#125;;<span class="comment">//定义售楼处</span></span><br><span class="line">salesOffices.clientList=[];<span class="comment">//缓存列表，存放订阅者的回调函数</span></span><br><span class="line">salesOffices.listen=<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;<span class="comment">//增加订阅者</span></span><br><span class="line">    <span class="keyword">this</span>.clientList.push(fn);<span class="comment">//订阅的消息添加进缓存列表</span></span><br><span class="line">&#125;</span><br><span class="line">salesOffices.trigger=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//发布消息</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,fn;fn=<span class="keyword">this</span>.clientList[i++];)&#123;</span><br><span class="line">        fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);<span class="comment">//arguments是发布消息时候带的参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">salesOffices.listen(<span class="function"><span class="keyword">function</span>(<span class="params">price,squareMeter</span>)</span>&#123;<span class="comment">//小明订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小明收到消息"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'价格='</span>+price);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'面积='</span>+squareMeter);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.listen(<span class="function"><span class="keyword">function</span>(<span class="params">price,squareMeter</span>)</span>&#123;<span class="comment">//小红订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小红收到消息"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'价格='</span>+price);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'面积='</span>+squareMeter);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.trigger(<span class="number">200000</span>,<span class="number">88</span>);</span><br><span class="line">salesOffices.trigger(<span class="number">100000</span>,<span class="number">100</span>);</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">小明收到消息</span></span><br><span class="line"><span class="comment">价格=200000</span></span><br><span class="line"><span class="comment">面积=88</span></span><br><span class="line"><span class="comment">小红收到消息</span></span><br><span class="line"><span class="comment">价格=200000</span></span><br><span class="line"><span class="comment">面积=88</span></span><br><span class="line"><span class="comment">小明收到消息</span></span><br><span class="line"><span class="comment">价格=100000</span></span><br><span class="line"><span class="comment">面积=100</span></span><br><span class="line"><span class="comment">小红收到消息</span></span><br><span class="line"><span class="comment">价格=100000</span></span><br><span class="line"><span class="comment">面积=100</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>至此，我们已经实现了一个最简单的发布 — 订阅模式，但这里还存在一些问题。我们看到订阅者接收到了发布者发布的每个消息，虽然小明只想买 88 平方米的房子，但是发布者把 110 平方米的信息也推送给了小明，这对小明来说是不必要的困扰。所以我们有必要增加一个标示 key ，让订阅者只订阅自己感兴趣的消息。改写后的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;; <span class="comment">// 定义售楼处</span></span><br><span class="line">salesOffices.clientList = &#123;&#125;; <span class="comment">// 缓存列表，存放订阅者的回调函数</span></span><br><span class="line">salesOffices.listen = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.clientList[key]) &#123; <span class="comment">// 如果还没有订阅过此类消息，给该类消息创建一个缓存列表</span></span><br><span class="line">        <span class="keyword">this</span>.clientList[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clientList[key].push(fn); <span class="comment">// 订阅的消息添加进消息缓存列表</span></span><br><span class="line">&#125;;</span><br><span class="line">salesOffices.trigger = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 发布消息</span></span><br><span class="line">    <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>), <span class="comment">// 取出消息类型</span></span><br><span class="line">        fns = <span class="keyword">this</span>.clientList[key]; <span class="comment">// 取出该消息对应的回调函数集合</span></span><br><span class="line">    <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123; <span class="comment">// 如果没有订阅该消息，则返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[i++];) &#123;</span><br><span class="line">        fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">// (2) // arguments 是发布消息时附送的参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123; <span class="comment">// 小明订阅 88 平方米房子的消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小明订阅 88 平方米房子的消息"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price); <span class="comment">// 输出： 2000000</span></span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter110'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123; <span class="comment">// 小红订阅 110 平方米房子的消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小红订阅 110 平方米房子的消息"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price); <span class="comment">// 输出： 3000000</span></span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter88'</span>, <span class="number">2000000</span>); <span class="comment">// 发布 88 平方米房子的价格</span></span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter110'</span>, <span class="number">3000000</span>); <span class="comment">// 发布 110 平方米房子的价格</span></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">小明订阅 88 平方米房子的消息</span></span><br><span class="line"><span class="comment">价格= 2000000</span></span><br><span class="line"><span class="comment">小红订阅 110 平方米房子的消息</span></span><br><span class="line"><span class="comment">价格= 3000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>很明显，现在订阅者可以只订阅自己感兴趣的事件了。</p><h1 id="发布-－-订阅模式的通用实现"><a href="#发布-－-订阅模式的通用实现" class="headerlink" title="发布 － 订阅模式的通用实现"></a>发布 － 订阅模式的通用实现</h1><p>现在我们已经看到了如何让售楼处拥有接受订阅和发布事件的功能。假设现在小明又去另一个售楼处买房子，那么这段代码是否必须在另一个售楼处对象上重写一次呢，有没有办法可以让所有对象都拥有发布 — 订阅功能呢？<br>答案显然是有的，JavaScript 作为一门解释执行的语言，给对象动态添加职责是理所当然的事情。<br>所以我们把发布 — 订阅的功能提取出来，放在一个单独的对象内：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var event = &#123;</span><br><span class="line">    clientList: [],</span><br><span class="line">    listen: function (<span class="built_in">key</span>, <span class="function"><span class="keyword">fn</span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="keyword">if</span> <span class="params">(!this.clientList[<span class="built_in">key</span>])</span> &#123;</span></span><br><span class="line"><span class="function">            this.clientList[<span class="built_in">key</span>] = []</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        this.clientList[<span class="built_in">key</span>].<span class="keyword">push</span>(<span class="function"><span class="keyword">fn</span>)</span>; <span class="comment">// 订阅的消息添加进缓存列表</span></span><br><span class="line">    &#125;,</span><br><span class="line">    trigger: function () &#123;</span><br><span class="line">        var <span class="built_in">key</span> = Array.prototype.shift.<span class="keyword">call</span>(arguments), <span class="comment">// (1);</span></span><br><span class="line">            fns = this.clientList[<span class="built_in">key</span>];</span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123; <span class="comment">// 如果没有绑定对应的消息</span></span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (var i = <span class="number">0</span>, <span class="function"><span class="keyword">fn</span></span>; <span class="function"><span class="keyword">fn</span> = fns[i++]</span>;) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">fn</span>.apply<span class="params">(this, arguments)</span></span>; <span class="comment">// (2) // arguments 是 trigger 时带上的参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再定义一个 installEvent 函数，这个函数可以给所有的对象都动态安装发布 — 订阅功能：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span> <span class="params">(obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</span><br><span class="line">        obj[i] = event[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再来测试一番，我们给售楼处对象 salesOffices 动态增加发布 — 订阅功能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;;</span><br><span class="line">installEvent(salesOffices);</span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123; <span class="comment">// 小明订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小明订阅消息"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter100'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123; <span class="comment">// 小红订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小红订阅消息"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter88'</span>, <span class="number">2000000</span>); <span class="comment">// 输出：2000000</span></span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter100'</span>, <span class="number">3000000</span>); <span class="comment">// 输出：3000000</span></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">小明订阅消息</span></span><br><span class="line"><span class="comment">价格= 2000000</span></span><br><span class="line"><span class="comment">小红订阅消息</span></span><br><span class="line"><span class="comment">价格= 3000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="取消订阅的事件"><a href="#取消订阅的事件" class="headerlink" title="取消订阅的事件"></a>取消订阅的事件</h1><p>有时候，我们也许需要取消订阅事件的功能。比如小明突然不想买房子了，为了避免继续接收到售楼处推送过来的短信，小明需要取消之前订阅的事件。现在我们给 event 对象增加 remove方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">event.remove = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fns = <span class="keyword">this</span>.clientList[key];</span><br><span class="line">    <span class="keyword">if</span> (!fns) &#123; <span class="comment">// 如果 key 对应的消息没有被人订阅，则直接返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!fn) &#123; <span class="comment">// 如果没有传入具体的回调函数，表示需要取消 key 对应消息的所有订阅</span></span><br><span class="line">        fns &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> l = fns.length - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) &#123; <span class="comment">// 反向遍历订阅的回调函数列表</span></span><br><span class="line">            <span class="keyword">var</span> _fn = fns[l];</span><br><span class="line">            <span class="keyword">if</span> (_fn === fn) &#123;</span><br><span class="line">                fns.splice(l, <span class="number">1</span>); <span class="comment">// 删除订阅者的回调函数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</span><br><span class="line">        obj[i] = event[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">installEvent(salesOffices);</span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter88'</span>, fn1 = <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123; <span class="comment">// 小明订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.listen(<span class="string">'squareMeter88'</span>, fn2 = <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123; <span class="comment">// 小红订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.remove(<span class="string">'squareMeter88'</span>, fn1); <span class="comment">// 删除小明的订阅</span></span><br><span class="line">salesOffices.trigger(<span class="string">'squareMeter88'</span>, <span class="number">2000000</span>); <span class="comment">// 输出：2000000</span></span><br></pre></td></tr></table></figure><h1 id="真实的例子——网站登录"><a href="#真实的例子——网站登录" class="headerlink" title="真实的例子——网站登录"></a>真实的例子——网站登录</h1><p>通过售楼处的虚拟例子，我们对发布 — 订阅模式的概念和实现都已经熟悉了，那么现在就趁热打铁，看一个真实的项目。<br>假如我们正在开发一个商城网站，网站里有 header头部、nav导航、消息列表、购物车等模块。这几个模块的渲染有一个共同的前提条件，就是必须先用 ajax异步请求获取用户的登录信息。<br>这是很正常的，比如用户的名字和头像要显示在 header模块里，而这两个字段都来自用户登录后返回的信息。<br>至于 ajax请求什么时候能成功返回用户信息，这点我们没有办法确定。现在的情节看起来像极了售楼处的例子，小明不知道什么时候开发商的售楼手续能够成功办下来。<br>但现在还不足以说服我们在此使用发布 — 订阅模式，因为异步的问题通常也可以用回调函数来解决。更重要的一点是，我们不知道除了 header头部、nav导航、消息列表、购物车之外，将来还有哪些模块需要使用这些用户信息。如果它们和用户信息模块产生了强耦合，比如下面这样的形式：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">login.succ(function(<span class="built_in">data</span>)&#123;</span><br><span class="line">    <span class="keyword">header</span>.setAvatar( <span class="built_in">data</span>.avatar); <span class="comment">// 设置 header 模块的头像</span></span><br><span class="line">    nav.setAvatar( <span class="built_in">data</span>.avatar ); <span class="comment">// 设置导航模块的头像</span></span><br><span class="line">    message.refresh(); <span class="comment">// 刷新消息列表</span></span><br><span class="line">    cart.refresh(); <span class="comment">// 刷新购物车列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在登录模块是我们负责编写的，但我们还必须了解 header 模块里设置头像的方法叫setAvatar 、购物车模块里刷新的方法叫 refresh ，这种耦合性会使程序变得僵硬，header 模块不能随意再改变 setAvatar 的方法名，它自身的名字也不能被改为 header1、header2。 这是针对具体实现编程的典型例子，针对具体实现编程是不被赞同的。<br>等到有一天，项目中又新增了一个收货地址管理的模块，这个模块本来是另一个同事所写的，而此时你正在马来西亚度假，但是他却不得不给你打电话：“Hi，登录之后麻烦刷新一下收货地址列表。”于是你又翻开你 3个月前写的登录模块，在最后部分加上这行代码：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">login.succ(function( data )&#123;</span><br><span class="line">    header.setAvatar( data.avatar)<span class="comment">;</span></span><br><span class="line">    nav.setAvatar( data.avatar )<span class="comment">;</span></span><br><span class="line">    message.refresh()<span class="comment">;</span></span><br><span class="line">    cart.refresh()<span class="comment">;</span></span><br><span class="line">    address.refresh()<span class="comment">; // 增加这行代码</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>我们就会越来越疲于应付这些突如其来的业务要求，要么跳槽了事，要么必须来重构这些代码。<br>用发布 — 订阅模式重写之后，对用户信息感兴趣的业务模块将自行订阅登录成功的消息事件。当登录成功时，登录模块只需要发布登录成功的消息，而业务方接受到消息之后，就会开始进行各自的业务处理，登录模块并不关心业务方究竟要做什么，也不想去了解它们的内部细节。改善后的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.ajax( <span class="string">'http:// xxx.com?login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; <span class="comment">// 登录成功</span></span><br><span class="line">    login.trigger( <span class="string">'loginSucc'</span>, data); <span class="comment">// 发布登录成功的消息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>各模块监听登录成功的消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> header = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// header 模块</span></span><br><span class="line">    login.listen(<span class="string">'loginSucc'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        header.setAvatar(data.avatar);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setAvatar: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'设置 header 模块的头像'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> nav = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// nav 模块</span></span><br><span class="line">    login.listen(<span class="string">'loginSucc'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        nav.setAvatar(data.avatar);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setAvatar: <span class="function"><span class="keyword">function</span> (<span class="params">avatar</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'设置 nav 模块的头像'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>如上所述，我们随时可以把 setAvatar 的方法名改成 setTouxiang 。如果有一天在登录完成之后，又增加一个刷新收货地址列表的行为，那么只要在收货地址模块里加上监听消息的方法即可，而这可以让开发该模块的同事自己完成，你作为登录模块的开发者，永远不用再关心这些行为了。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> address = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// nav 模块</span></span><br><span class="line">    login.listen(<span class="string">'loginSucc'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        address.refresh(obj);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        refresh: <span class="function"><span class="keyword">function</span> (<span class="params">avatar</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'刷新收货地址列表'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="全局的发布-－-订阅对象"><a href="#全局的发布-－-订阅对象" class="headerlink" title="全局的发布 － 订阅对象"></a>全局的发布 － 订阅对象</h1><p>回想下刚刚实现的发布 — 订阅模式，我们给售楼处对象和登录对象都添加了订阅和发布的功能，这里还存在两个小问题。</p><ul><li>我们给每个发布者对象都添加了 listen 和 trigger 方法，以及一个缓存列表 clientList ，这其实是一种资源浪费。</li><li>小明跟售楼处对象还是存在一定的耦合性，小明至少要知道售楼处对象的名字是salesOffices ，才能顺利的订阅到事件。见如下代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salesOffices.listen( <span class="string">'squareMeter100'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小明订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'价格= '</span> + price );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果小明还关心 300平方米的房子，而这套房子的卖家是 salesOffices2 ，这意味着小明要开始订阅 salesOffices2 对象。见如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">salesOffices2.listen( <span class="string">'squareMeter300'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> price </span>)</span>&#123; <span class="comment">// 小明订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'价格= '</span> + price );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其实在现实中，买房子未必要亲自去售楼处，我们只要把订阅的请求交给中介公司，而各大房产公司也只需要通过中介公司来发布房子信息。这样一来，我们不用关心消息是来自哪个房产公司，我们在意的是能否顺利收到消息。当然，为了保证订阅者和发布者能顺利通信，订阅者和发布者都必须知道这个中介公司。<br>同样在程序中，发布 — 订阅模式可以用一个全局的 <code>Event</code>对象来实现，订阅者不需要了解消息来自哪个发布者，发布者也不知道消息会推送给哪些订阅者， Event 作为一个类似“中介者”的角色，把订阅者和发布者联系起来。见如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clientList = &#123;&#125;,</span><br><span class="line">        listen,</span><br><span class="line">        trigger,</span><br><span class="line">        remove;</span><br><span class="line">    listen = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!clientList[key]) &#123;</span><br><span class="line">            clientList[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        clientList[key].push(fn);</span><br><span class="line">    &#125;;</span><br><span class="line">    trigger = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>),</span><br><span class="line"></span><br><span class="line">            fns = clientList[key];</span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[i++];) &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    remove = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fns = clientList[key];</span><br><span class="line">        <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">            fns &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> l = fns.length - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">                <span class="keyword">var</span> _fn = fns[l];</span><br><span class="line">                <span class="keyword">if</span> (_fn === fn) &#123;</span><br><span class="line">                    fns.splice(l, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        listen: listen,</span><br><span class="line">        trigger: trigger,</span><br><span class="line">        remove: remove</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">Event.listen(<span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123; <span class="comment">// 小红订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小红订阅消息"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price); <span class="comment">// 输出：'价格=2000000'</span></span><br><span class="line">&#125;);</span><br><span class="line">Event.listen(<span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123; <span class="comment">// 小红订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小ming订阅消息"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price); <span class="comment">// 输出：'价格=2000000'</span></span><br><span class="line">&#125;);</span><br><span class="line">Event.listen(<span class="string">'squareMeter11'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123; <span class="comment">// 小红订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小ming订阅消息"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price); <span class="comment">// 输出：'价格=2000000'</span></span><br><span class="line">&#125;);</span><br><span class="line">Event.trigger(<span class="string">'squareMeter88'</span>, <span class="number">2000000</span>); <span class="comment">// 售楼处发布消息</span></span><br><span class="line">Event.trigger(<span class="string">'squareMeter11'</span>, <span class="number">4000000</span>); <span class="comment">// 售楼处发布消息</span></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">小红订阅消息</span></span><br><span class="line"><span class="comment">价格= 2000000</span></span><br><span class="line"><span class="comment">小ming订阅消息</span></span><br><span class="line"><span class="comment">价格= 2000000</span></span><br><span class="line"><span class="comment">小ming订阅消息</span></span><br><span class="line"><span class="comment">价格= 4000000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="模块间通信"><a href="#模块间通信" class="headerlink" title="模块间通信"></a>模块间通信</h1><p>上一节中实现的发布 — 订阅模式的实现，是基于一个全局的 Event 对象，我们利用它可以在两个封装良好的模块中进行通信，这两个模块可以完全不知道对方的存在。就如同有了中介公司之后，我们不再需要知道房子开售的消息来自哪个售楼处。<br>比如现在有两个模块，a模块里面有一个按钮，每次点击按钮之后，b模块里的 div中会显示按钮的总点击次数，我们用全局发布 — 订阅模式完成下面的代码，使得 a 模块和 b 模块可以在保持封装性的前提下进行通信。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/JavaScript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById( <span class="string">'count'</span> );</span></span><br><span class="line"><span class="actionscript">    button.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            Event.trigger( <span class="string">'add'</span>, count++ );</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> b = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById( <span class="string">'show'</span> );</span></span><br><span class="line"><span class="actionscript">    Event.listen( <span class="string">'add'</span>, <span class="function"><span class="keyword">function</span><span class="params">( count )</span></span>&#123;</span></span><br><span class="line"><span class="undefined">        div.innerHTML = count;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但在这里我们要留意另一个问题，模块之间如果用了太多的全局发布 — 订阅模式来通信，那么模块与模块之间的联系就被隐藏到了背后。我们最终会搞不清楚消息来自哪个模块，或者消息会流向哪些模块，这又会给我们的维护带来一些麻烦，也许某个模块的作用就是暴露一些接口给其他模块调用。</p><h1 id="必须先订阅再发布吗"><a href="#必须先订阅再发布吗" class="headerlink" title="必须先订阅再发布吗"></a>必须先订阅再发布吗</h1><p>我们所了解到的发布 — 订阅模式，都是订阅者必须先订阅一个消息，随后才能接收到发布者发布的消息。如果把顺序反过来，发布者先发布一条消息，而在此之前并没有对象来订阅它，这条消息无疑将消失在宇宙中。<br>在某些情况下，我们需要先将这条消息保存下来，等到有对象来订阅它的时候，再重新把消息发布给订阅者。就如同 QQ中的离线消息一样，离线消息被保存在服务器中，接收人下次登录上线之后，可以重新收到这条消息。<br>这种需求在实际项目中是存在的，比如在之前的商城网站中，获取到用户信息之后才能渲染用户导航模块，而获取用户信息的操作是一个 ajax 异步请求。当 ajax 请求成功返回之后会发布一个事件，在此之前订阅了此事件的用户导航模块可以接收到这些用户信息。<br>但是这只是理想的状况，因为异步的原因，我们不能保证 ajax请求返回的时间，有时候它返回得比较快，而此时用户导航模块的代码还没有加载好（还没有订阅相应事件），特别是在用了一些模块化惰性加载的技术后，这是很可能发生的事情。也许我们还需要一个方案，使得我们的发布 — 订阅对象拥有先发布后订阅的能力。<br>为了满足这个需求，我们要建立一个存放离线事件的堆栈，当事件发布的时候，如果此时还没有订阅者来订阅这个事件，我们暂时把发布事件的动作包裹在一个函数里，这些包装函数将被存入堆栈中，等到终于有对象来订阅此事件的时候，我们将遍历堆栈并且依次执行这些包装函数，也就是重新发布里面的事件。当然离线事件的生命周期只有一次，就像 QQ的未读消息只会被重新阅读一次，所以刚才的操作我们只能进行一次。</p><h1 id="全局事件的命名冲突"><a href="#全局事件的命名冲突" class="headerlink" title="全局事件的命名冲突"></a>全局事件的命名冲突</h1><p>全局的发布 — 订阅对象里只有一个 clinetList 来存放消息名和回调函数，大家都通过它来订阅和发布各种消息，久而久之，难免会出现事件名冲突的情况，所以我们还可以给 Event 对象提供创建命名空间的功能。<br>在提供最终的代码之前，我们来感受一下怎么使用这两个新增的功能。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">**** 先发布后订阅 **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line">Event.trigger(<span class="string">'click'</span>, <span class="number">1</span>);</span><br><span class="line">Event.listen(<span class="string">'click'</span>, function(a) &#123;</span><br><span class="line">    console.log(a); <span class="comment">// 输出：1</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">**** 使用命名空间 **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></span><br><span class="line">Event.create(<span class="string">'namespace1'</span>).listen(<span class="string">'click'</span>, function(a) &#123;</span><br><span class="line">    console.log(a); <span class="comment">// 输出：1</span></span><br><span class="line">&#125;);</span><br><span class="line">Event.create(<span class="string">'namespace1'</span>).trigger(<span class="string">'click'</span>, <span class="number">1</span>);</span><br><span class="line">Event.create(<span class="string">'namespace2'</span>).listen(<span class="string">'click'</span>, function(a) &#123;</span><br><span class="line">    console.log(a); <span class="comment">// 输出：2</span></span><br><span class="line">&#125;);</span><br><span class="line">Event.create(<span class="string">'namespace2'</span>).trigger(<span class="string">'click'</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>具体实现代码如下：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> global = <span class="keyword">this</span>,</span><br><span class="line">        Event,</span><br><span class="line">        _default = <span class="string">"default"</span>;</span><br><span class="line">    Event = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _listen,</span><br><span class="line">            _trigger,</span><br><span class="line">            _remove,</span><br><span class="line">            _slice = Array.prototype.slice,</span><br><span class="line">            _shift = Array.prototype.shift,</span><br><span class="line">            _unshift = Array.prototype.unshift,</span><br><span class="line">            namespaceCache = &#123;&#125;,</span><br><span class="line">            _create,</span><br><span class="line">            find,</span><br><span class="line">            <span class="keyword">each</span> = <span class="function"><span class="keyword">function</span><span class="params">(ary, fn)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> ret;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = ary.length; i &lt; l; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> n = ary[i];</span><br><span class="line">                    ret = fn.call(n, i, n);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;;</span><br><span class="line">        _listen = <span class="function"><span class="keyword">function</span><span class="params">(key, fn, cache)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!cache[key]) &#123;</span><br><span class="line">                cache[key] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            cache[key].push(fn);</span><br><span class="line">        &#125;;</span><br><span class="line">        _remove = <span class="function"><span class="keyword">function</span><span class="params">(key, cache, fn)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fn) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = cache[key].length; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cache[key][i] === fn) &#123;</span><br><span class="line">                            cache[key].splice(i, <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache[key] = [];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        _trigger = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cache = _shift.call(arguments),</span><br><span class="line">                key = _shift.call(arguments),</span><br><span class="line">                args = arguments,</span><br><span class="line">                _self = <span class="keyword">this</span>,</span><br><span class="line">                ret,</span><br><span class="line">                stack = cache[key];</span><br><span class="line">            <span class="keyword">if</span> (!stack || !stack.length) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">each</span>(stack, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.apply(_self, args);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        _create = <span class="function"><span class="keyword">function</span><span class="params">(namespace)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">namespace</span> = <span class="keyword">namespace</span> || _default;</span><br><span class="line">            <span class="keyword">var</span> cache = &#123;&#125;,</span><br><span class="line">                offlineStack = [], <span class="comment">// 离线事件</span></span><br><span class="line">                ret = &#123;</span><br><span class="line">                    listen: <span class="function"><span class="keyword">function</span><span class="params">(key, fn, last)</span> </span>&#123;</span><br><span class="line">                        _listen(key, fn, cache);</span><br><span class="line">                        <span class="keyword">if</span> (offlineStack === <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (last === <span class="string">'last'</span>) &#123;</span><br><span class="line">                            offlineStack.length &amp;&amp; offlineStack.pop()();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">each</span>(offlineStack, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                <span class="keyword">this</span>();</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        offlineStack = <span class="literal">null</span>;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    one: <span class="function"><span class="keyword">function</span><span class="params">(key, fn, last)</span> </span>&#123;</span><br><span class="line">                        _remove(key, cache);</span><br><span class="line">                        <span class="keyword">this</span>.listen(key, fn, last);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    remove: <span class="function"><span class="keyword">function</span><span class="params">(key, fn)</span> </span>&#123;</span><br><span class="line">                        _remove(key, cache, fn);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    trigger: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> fn,</span><br><span class="line">                            args,</span><br><span class="line">                            _self = <span class="keyword">this</span>;</span><br><span class="line">                        _unshift.call(arguments, cache);</span><br><span class="line">                        args = arguments;</span><br><span class="line">                        fn = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> _trigger.apply(_self, args);</span><br><span class="line">                        &#125;;</span><br><span class="line">                        <span class="keyword">if</span> (offlineStack) &#123;</span><br><span class="line">                            <span class="keyword">return</span> offlineStack.push(fn);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> fn();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">namespace</span> ?</span><br><span class="line">                (namespaceCache[<span class="keyword">namespace</span>] ? namespaceCache[<span class="keyword">namespace</span>] :</span><br><span class="line">                    namespaceCache[<span class="keyword">namespace</span>] = ret) :</span><br><span class="line">                ret;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            create: _create,</span><br><span class="line">            one: <span class="function"><span class="keyword">function</span><span class="params">(key, fn, last)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                event.one(key, fn, last);</span><br><span class="line">            &#125;,</span><br><span class="line">            remove: <span class="function"><span class="keyword">function</span><span class="params">(key, fn)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                event.remove(key, fn);</span><br><span class="line">            &#125;,</span><br><span class="line">            listen: <span class="function"><span class="keyword">function</span><span class="params">(key, fn, last)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                event.listen(key, fn, last);</span><br><span class="line">            &#125;,</span><br><span class="line">            trigger: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                event.trigger.apply(<span class="keyword">this</span>, arguments);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;();</span><br><span class="line">    <span class="keyword">return</span> Event;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="JavaScript-实现发布-－-订阅模式的便利性"><a href="#JavaScript-实现发布-－-订阅模式的便利性" class="headerlink" title="JavaScript 实现发布 － 订阅模式的便利性"></a>JavaScript 实现发布 － 订阅模式的便利性</h1><p>这里要提出的是，我们一直讨论的发布 — 订阅模式，跟一些别的语言（比如 Java）中的实现还是有区别的。在 Java中实现一个自己的发布 — 订阅模式，通常会把订阅者对象自身当成引用传入发布者对象中，同时订阅者对象还需提供一个名为诸如 update的方法，供发布者对象在适合的时候调用。而在 JavaScript中，我们用注册回调函数的形式来代替传统的发布 — 订阅模式，显得更加优雅和简单。<br>另外，在 JavaScript中，我们无需去选择使用推模型还是拉模型。推模型是指在事件发生时，发布者一次性把所有更改的状态和数据都推送给订阅者。拉模型不同的地方是，发布者仅仅通知订阅者事件已经发生了，此外发布者要提供一些公开的接口供订阅者来主动拉取数据。拉模型的好处是可以让订阅者“按需获取”，但同时有可能让发布者变成一个“门户大开”的对象，同时增加了代码量和复杂度。<br>刚好在 JavaScript中， arguments 可以很方便地表示参数列表，所以我们一般都会选择推模型，使用 Function.prototype.apply 方法把所有参数都推送给订阅者。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本章我们学习了发布 — 订阅模式，也就是常说的观察者模式。发布 — 订阅模式在实际开发中非常有用。<br>发布 — 订阅模式的优点非常明显，一为时间上的解耦，二为对象之间的解耦。它的应用非常广泛，既可以用在异步编程中，也可以帮助我们完成更松耦合的代码编写。发布 — 订阅模式还可以用来帮助实现一些别的设计模式，比如中介者模式。 从架构上来看，无论是 MVC还是 MVVM，都少不了发布 — 订阅模式的参与，而且 JavaScript本身也是一门基于事件驱动的语言。<br>当然，发布 — 订阅模式也不是完全没有缺点。创建订阅者本身要消耗一定的时间和内存，而且当你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中。另外，发布 — 订阅模式虽然可以弱化对象之间的联系，但如果过度使用的话，对象和对象之间的必要联系也将被深埋在背后，会导致程序难以跟踪维护和理解。特别是有多个发布者和订阅者嵌套到一起的时候，要跟踪一个 bug不是件轻松的事情。<br>  <font color="#00ffff" size="6">End</font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发布 — 订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。在 JavaScript开发中，我们一般用事件模型来替代传统的发布 — 订阅模式。&lt;/p&gt;
&lt;h1 id=&quot;现实中的发布-－-订阅模式&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="发布-订阅" scheme="http://myqilixiang.github.io/tags/%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85/"/>
    
  </entry>
  
  <entry>
    <title>javascript中this、call和apply</title>
    <link href="http://myqilixiang.github.io/2017/08/28/javascript%E4%B8%ADthis%E3%80%81call%E5%92%8Capply/"/>
    <id>http://myqilixiang.github.io/2017/08/28/javascript中this、call和apply/</id>
    <published>2017-08-28T08:16:59.000Z</published>
    <updated>2020-03-12T14:11:54.745Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 编程中， this 关键字总是让初学者感到迷惑， Function.prototype.call 和<br>Function.prototype.apply 这两个方法也有着广泛的运用。我们有必要在学习设计模式之前先理解<br>这几个概念。</p><h1 id="1-this"><a href="#1-this" class="headerlink" title="1.this"></a>1.this</h1><h2 id="1-1-this的指向"><a href="#1-1-this的指向" class="headerlink" title="1.1 this的指向"></a>1.1 this的指向</h2><p>除去不常用的 with 和 eval 的情况，具体到实际应用中， this 的指向大致可以分为以下 4种。</p><ul><li>作为对象的方法调用。</li><li>作为普通函数调用。</li><li>构造器调用。</li><li>Function.prototype.call 或 Function.prototype.apply 调用。</li></ul><h3 id="1-作为对象的方法调用"><a href="#1-作为对象的方法调用" class="headerlink" title="1. 作为对象的方法调用"></a>1. 作为对象的方法调用</h3><p>当函数作为对象的方法被调用时， this 指向该对象：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a: <span class="number">1</span>,</span><br><span class="line">getA: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">alert ( <span class="keyword">this</span> === obj ); <span class="comment">// 输出：true</span></span><br><span class="line">alert ( <span class="keyword">this</span>.a ); <span class="comment">// 输出: 1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.getA();</span><br></pre></td></tr></table></figure><h3 id="2-作为普通函数调用"><a href="#2-作为普通函数调用" class="headerlink" title="2. 作为普通函数调用"></a>2. 作为普通函数调用</h3><p>当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，此时的 this 总是指向全局对象。在浏览器的 JavaScript里，这个全局对象是 window 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.name = <span class="string">'globalName'</span>;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( getName() ); <span class="comment">// 输出：globalName</span></span><br><span class="line">或者：</span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">'globalName'</span>;</span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">name: <span class="string">'sven'</span>,</span><br><span class="line">getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = myObject.getName;</span><br><span class="line"><span class="built_in">console</span>.log( getName() ); <span class="comment">// globalName</span></span><br></pre></td></tr></table></figure><p>有时候我们会遇到一些困扰，比如在 div 节点的事件函数内部，有一个局部的 callback 方法，callback被作为普通函数调用时， callback 内部的 this 指向了 window ，但我们往往是想让它指向该 div 节点，见如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>我是一个 div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.id = <span class="string">'window'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById( <span class="string">'div1'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert ( <span class="keyword">this</span>.id ); <span class="comment">// 输出：'div1'</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert ( <span class="keyword">this</span>.id ); <span class="comment">// 输出：'window'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        callback();</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时有一种简单的解决方案，可以用一个变量保存 div 节点的引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById( <span class="string">'div1'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// 保存 div 的引用</span></span><br><span class="line">    <span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert ( that.id ); <span class="comment">// 输出：'div1'</span></span><br><span class="line">    &#125;</span><br><span class="line">    callback();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 ECMAScript 5的 strict 模式下，这种情况下的 this 已经被规定为不会指向全局对象，而是 undefined ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span></span><br><span class="line">    alert ( <span class="keyword">this</span> ); <span class="comment">// 输出：undefined</span></span><br><span class="line">&#125;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><h3 id="3-构造器调用"><a href="#3-构造器调用" class="headerlink" title="3. 构造器调用"></a>3. 构造器调用</h3><p>JavaScript 中没有类，但是可以从构造器中创建对象，同时也提供了 new 运算符，使得构造器看起来更像一个类。<br>除了宿主提供的一些内置函数，大部分 JavaScript函数都可以当作构造器使用。构造器的外表跟普通函数一模一样，它们的区别在于被调用的方式。当用 new 运算符调用函数时，该函数总会返回一个对象，通常情况下，构造器里的 this 就指向返回的这个对象，见如下代码：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyClass = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'sven'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> MyClass();</span><br><span class="line">alert ( obj.name ); <span class="comment">// 输出：sven</span></span><br></pre></td></tr></table></figure><p>但用 new 调用构造器时，还要注意一个问题，如果构造器显式地返回了一个 object 类型的对象，那么此次运算结果最终会返回这个对象，而不是我们之前期待的 this ：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyClass = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'sven'</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="comment">// 显式地返回一个对象</span></span><br><span class="line">        name: <span class="string">'anne'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> MyClass();</span><br><span class="line">alert ( obj.name ); <span class="comment">// 输出：anne</span></span><br></pre></td></tr></table></figure><p>如果构造器不显式地返回任何数据，或者是返回一个非对象类型的数据，就不会造成上述问题：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyClass = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'sven'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'anne'</span>; <span class="comment">// 返回 string 类型</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> MyClass();</span><br><span class="line">alert ( obj.name ); <span class="comment">// 输出：sven</span></span><br></pre></td></tr></table></figure><h3 id="4-Function-prototype-call-或-Function-prototype-apply-调用"><a href="#4-Function-prototype-call-或-Function-prototype-apply-调用" class="headerlink" title="4.  Function.prototype.call 或 Function.prototype.apply 调用"></a>4.  Function.prototype.call 或 Function.prototype.apply 调用</h3><p>跟普通的函数调用相比，用 Function.prototype.call 或 Function.prototype.apply 可以动态地改变传入函数的 this ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">'sven'</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name: <span class="string">'anne'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( obj1.getName() ); <span class="comment">// 输出: sven</span></span><br><span class="line"><span class="built_in">console</span>.log( obj1.getName.call( obj2 ) ); <span class="comment">// 输出：anne</span></span><br></pre></td></tr></table></figure><p>call 和 apply 方法能很好地体现 JavaScript的函数式语言特性，在 JavaScript中，几乎每一次编写函数式语言风格的代码，都离不开 call 和 apply 。</p><h2 id="1-2-丢失的this"><a href="#1-2-丢失的this" class="headerlink" title="1.2 丢失的this"></a>1.2 丢失的this</h2><p>这是一个经常遇到的问题，我们先看下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    myName: <span class="string">'sven'</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.myName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( obj.getName() ); <span class="comment">// 输出：'sven'</span></span><br><span class="line"><span class="keyword">var</span> getName2 = obj.getName;</span><br><span class="line"><span class="built_in">console</span>.log( getName2() ); <span class="comment">// 输出：undefined</span></span><br></pre></td></tr></table></figure><p>当调用 obj.getName 时， getName 方法是作为 obj 对象的属性被调用的，根据之前提到的规律，此时的 this 指向 obj 对象，所以 obj.getName() 输出 ‘sven’ 。<br>当用另外一个变量 getName2 来引用 obj.getName ，并且调用 getName2 时，根据之前提到的规律，此时是普通函数调用方式， this是指向全局window的，所以程序的执行结果是 undefined 。<br>再看另一个例子， document.getElementById 这个方法名实在有点过长，我们大概尝试过用一个短的函数来代替它，如同 prototype.js 等一些框架所做过的事情：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getId = <span class="function"><span class="keyword">function</span>(<span class="params"> id </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById( id );</span><br><span class="line">&#125;;</span><br><span class="line">getId( <span class="string">'div1'</span> );</span><br></pre></td></tr></table></figure><p>我们也许思考过为什么不能用下面这种更简单的方式：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getId = <span class="built_in">document</span>.getElementById;</span><br><span class="line">getId( <span class="string">'div1'</span> );</span><br></pre></td></tr></table></figure><p>现在不妨花 1分钟时间，让这段代码在浏览器中运行一次：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>我是一个 div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> getId = <span class="built_in">document</span>.getElementById;</span></span><br><span class="line"><span class="actionscript">        getId( <span class="string">'div1'</span> );</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Chrome、Firefox、IE10 中执行过后就会发现，这段代码抛出了一个异常。这是因为许多引擎的 document.getElementById 方法的内部实现中需要用到 this 。这个 this 本来被期望指向document ，当 getElementById 方法作为 document 对象的属性被调用时，方法内部的 this 确实是指向 document 的。<br>但当用 getId 来引用 document.getElementById 之后，再调用 getId ，此时就成了普通函数调用，函数内部的 this 指向了 window ，而不是原来的 document 。<br>我们可以尝试利用 apply 把 document 当作 this 传入 getId 函数，帮助“修正” this ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById = (<span class="function"><span class="keyword">function</span>(<span class="params"> func </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func.apply( <span class="built_in">document</span>, <span class="built_in">arguments</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)( <span class="built_in">document</span>.getElementById );</span><br><span class="line"><span class="keyword">var</span> getId = <span class="built_in">document</span>.getElementById;</span><br><span class="line"><span class="keyword">var</span> div = getId( <span class="string">'div1'</span> );</span><br><span class="line">alert (div.id); <span class="comment">// 输出： div1</span></span><br></pre></td></tr></table></figure><h1 id="2-call-和-apply"><a href="#2-call-和-apply" class="headerlink" title="2.call 和 apply"></a>2.call 和 apply</h1><p>ECAMScript 3给 Function 的原型定义了两个方法，它们是 Function.prototype.call 和 Function.<br>prototype.apply 。在实际开发中，特别是在一些函数式风格的代码编写中， call 和 apply 方法尤为有用。</p><h2 id="2-1call-和-apply-的区别"><a href="#2-1call-和-apply-的区别" class="headerlink" title="2.1call 和 apply 的区别"></a>2.1call 和 apply 的区别</h2><p>Function.prototype.call 和 Function.prototype.apply 都是非常常用的方法。它们的作用一模一样，区别仅在于传入参数形式的不同。<br>apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组， apply 方法把这个集合中的元素作为参数传递给被调用的函数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="function"><span class="keyword">func</span> = <span class="title">function</span><span class="params">( a, b, <span class="built_in">c</span> )</span></span>&#123;</span><br><span class="line">    alert ( [ a, b, <span class="built_in">c</span> ] ); <span class="comment">// 输出 [ 1, 2, 3 ]</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">func</span>.<span class="title">apply</span><span class="params">( null, [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ] )</span></span>;</span><br></pre></td></tr></table></figure><p>在这段代码中，参数 1、2、3 被放在数组中一起传入 func 函数，它们分别对应 func 参数列表中的 a 、 b 、 c 。<br>在这段代码中，参数 1、2、3 被放在数组中一起传入 func 函数，它们分别对应 func 参数列表中的 a 、 b 、 c 。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="function"><span class="keyword">func</span> = <span class="title">function</span><span class="params">( a, b, <span class="built_in">c</span> )</span></span>&#123;</span><br><span class="line">    alert ( [ a, b, <span class="built_in">c</span> ] ); <span class="comment">// 输出 [ 1, 2, 3 ]</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">func</span>.<span class="title">call</span><span class="params">( null, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> )</span></span>;</span><br></pre></td></tr></table></figure><p>当调用一个函数时，JavaScript 的解释器并不会计较形参和实参在数量、类型以及顺序上的区别，JavaScript的参数在内部就是用一个数组来表示的。从这个意义上说， apply 比 call 的使用率更高，我们不必关心具体有多少参数被传入函数，只要用 apply 一股脑地推过去就可以了。<br>call 是包装在 apply 上面的一颗语法糖，如果我们明确地知道函数接受多少个参数，而且想一目了然地表达形参和实参的对应关系，那么也可以用 call 来传送参数。<br>当使用 call 或者 apply 的时候，如果我们传入的第一个参数为 null ，函数体内的 this 会指向默认的宿主对象，在浏览器中则是 window ：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="function"><span class="keyword">func</span> = <span class="title">function</span><span class="params">( a, b, <span class="built_in">c</span> )</span></span>&#123;</span><br><span class="line">    alert ( this === window ); <span class="comment">// 输出 true</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="function"><span class="keyword">func</span>.<span class="title">apply</span><span class="params">( null, [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ] )</span></span>;</span><br></pre></td></tr></table></figure><p>但如果是在严格模式下，函数体内的 this 还是为 null ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"> a, b, c </span>)</span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    alert ( <span class="keyword">this</span> === <span class="literal">null</span> ); <span class="comment">// 输出 true</span></span><br><span class="line">&#125;</span><br><span class="line">func.apply( <span class="literal">null</span>, [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ] );</span><br></pre></td></tr></table></figure><p>有时候我们使用 call 或者 apply 的目的不在于指定 this 指向，而是另有用途，比如借用其他对象的方法。那么我们可以传入 null 来代替某个具体的对象：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.max.apply( null, [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span> ] ) <span class="comment">// 输出：5</span></span><br></pre></td></tr></table></figure><h2 id="2-2call-和-apply-的用途"><a href="#2-2call-和-apply-的用途" class="headerlink" title="2.2call 和 apply 的用途"></a>2.2call 和 apply 的用途</h2><h3 id="1-改变-this-指向"><a href="#1-改变-this-指向" class="headerlink" title="1.改变 this 指向"></a>1.改变 this 指向</h3><p>call 和 apply 最常见的用途是改变函数内部的 this 指向，我们来看个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">'sven'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name: <span class="string">'anne'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">'window'</span>;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert ( <span class="keyword">this</span>.name );</span><br><span class="line">&#125;;</span><br><span class="line">getName(); <span class="comment">// 输出: window</span></span><br><span class="line">getName.call( obj1 ); <span class="comment">// 输出: sven</span></span><br><span class="line">getName.call( obj2 ); <span class="comment">// 输出: anne</span></span><br></pre></td></tr></table></figure><p>当执行 getName.call( obj1 ) 这句代码时， getName 函数体内的 this 就指向 obj1 对象，所以<br>此处的</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    alert ( <span class="keyword">this</span>.name );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实际上相当于:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    alert ( obj1.name ); <span class="comment">// 输出: sven</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在实际开发中，经常会遇到 this 指向被不经意改变的场景，比如有一个 div 节点， div 节点的 onclick 事件中的 this 本来是指向这个 div 的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById( <span class="string">'div1'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert( <span class="keyword">this</span>.id ); <span class="comment">// 输出：div1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假如该事件函数中有一个内部函数 func ，在事件内部调用 func 函数时， func 函数体内的 this就指向了 window ，而不是我们预期的 div ，见如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById( <span class="string">'div1'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert( <span class="keyword">this</span>.id ); <span class="comment">// 输出：div1</span></span><br><span class="line">    <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert ( <span class="keyword">this</span>.id ); <span class="comment">// 输出：undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">func();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这时候我们用 call 来修正 func 函数内的 this ，使其依然指向 div ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById( <span class="string">'div1'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert ( <span class="keyword">this</span>.id ); <span class="comment">// 输出：div1</span></span><br><span class="line">    &#125;</span><br><span class="line">    func.call( <span class="keyword">this</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-Function-prototype-bind"><a href="#2-Function-prototype-bind" class="headerlink" title="2. Function.prototype.bind"></a>2. Function.prototype.bind</h3><p>大部分高级浏览器都实现了内置的 Function.prototype.bind ，用来指定函数内部的 this 指向，即使没有原生的 Function.prototype.bind 实现，我们来模拟一个也不是难事，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"> context </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>; <span class="comment">// 保存原函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 返回一个新的函数</span></span><br><span class="line">        <span class="keyword">return</span> self.apply( context, <span class="built_in">arguments</span> ); <span class="comment">// 执行新的函数的时候，会把之前传入的 context</span></span><br><span class="line">        <span class="comment">// 当作新函数体内的 this</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'sven'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert ( <span class="keyword">this</span>.name ); <span class="comment">// 输出：sven</span></span><br><span class="line">&#125;.bind( obj);</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>我们通过 Function.prototype.bind 来“包装” func 函数，并且传入一个对象 context 当作参数，这个 context 对象就是我们想修正的 this 对象。<br>在 Function.prototype.bind 的内部实现中，我们先把 func 函数的引用保存起来，然后返回一个新的函数。当我们在将来执行 func 函数时，实际上先执行的是这个刚刚返回的新函数。在新函数内部，self.apply( context, arguments ) 这句代码才是执行原来的 func 函数，并且指定 context对象为 func 函数体内的 this 。<br>这是一个简化版的 Function.prototype.bind 实现，通常我们还会把它实现得稍微复杂一点，使得可以往 func 函数中预先填入一些参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>, <span class="comment">// 保存原函数</span></span><br><span class="line">        context = [].shift.call( <span class="built_in">arguments</span> ), <span class="comment">// 需要绑定的 this 上下文</span></span><br><span class="line">        args = [].slice.call( <span class="built_in">arguments</span> ); <span class="comment">// 剩余的参数转成数组</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 返回一个新的函数</span></span><br><span class="line">            <span class="keyword">return</span> self.apply( context, [].concat.call( args, [].slice.call( <span class="built_in">arguments</span> ) ) );</span><br><span class="line">         <span class="comment">// 执行新的函数的时候，会把之前传入的 context 当作新函数体内的 this</span></span><br><span class="line">         <span class="comment">// 并且组合两次分别传入的参数，作为新函数的参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'sven'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"> a, b, c, d </span>)</span>&#123;</span><br><span class="line">    alert ( <span class="keyword">this</span>.name ); <span class="comment">// 输出：sven</span></span><br><span class="line">    alert ( [ a, b, c, d ] ) <span class="comment">// 输出：[ 1, 2, 3, 4 ]</span></span><br><span class="line">&#125;.bind( obj, <span class="number">1</span>, <span class="number">2</span> );</span><br><span class="line">func( <span class="number">3</span>, <span class="number">4</span> );</span><br></pre></td></tr></table></figure><h3 id="3-借用其他对象的方法"><a href="#3-借用其他对象的方法" class="headerlink" title="3.借用其他对象的方法"></a>3.借用其他对象的方法</h3><p>我们知道，杜鹃既不会筑巢，也不会孵雏，而是把自己的蛋寄托给云雀等其他鸟类，让它们代为孵化和养育。同样，在 JavaScript中也存在类似的借用现象。<br>借用方法的第一种场景是“借用构造函数”，通过这种技术，可以实现一些类似继承的效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    A.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">&#125;;</span><br><span class="line">B.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B( <span class="string">'sven'</span> );</span><br><span class="line"><span class="built_in">console</span>.log( b.getName() ); <span class="comment">// 输出： 'sven'</span></span><br></pre></td></tr></table></figure><p>借用方法的第二种运用场景跟我们的关系更加密切。<br>函数的参数列表 arguments 是一个类数组对象，虽然它也有“下标”，但它并非真正的数组，所以也不能像数组一样，进行排序操作或者往集合里添加一个新的元素。这种情况下，我们常常会借用 Array.prototype 对象上的方法。比如想往 arguments 中添加一个新的元素，通常会借用Array.prototype.push ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.push.call( <span class="built_in">arguments</span>, <span class="number">3</span> );</span><br><span class="line">    <span class="built_in">console</span>.log ( <span class="built_in">arguments</span> ); <span class="comment">// 输出[1,2,3]</span></span><br><span class="line">&#125;)( <span class="number">1</span>, <span class="number">2</span> );</span><br></pre></td></tr></table></figure><p>在操作 arguments 的时候，我们经常非常频繁地找 Array.prototype 对象借用方法。<br>想把 arguments 转成真正的数组的时候，可以借用 Array.prototype.slice 方法；想截去arguments 列表中的头一个元素时，又可以借用 Array.prototype.shift 方法。那么这种机制的内部实现原理是什么呢？我们不妨翻开 V8的引擎源码，以 Array.prototype.push 为例，看看 V8引擎中的具体实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function ArrayPush() &#123;</span><br><span class="line">    <span class="keyword">var</span> n = TO_UINT32( <span class="keyword">this</span>.length ); <span class="comment">// 被 push 的对象的 length</span></span><br><span class="line">    <span class="keyword">var</span> m = %_ArgumentsLength(); <span class="comment">// push 的参数个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">this</span>[ i + n ] = %_Arguments( i ); <span class="comment">// 复制元素 (1)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length = n + m; <span class="comment">// 修正 length 属性的值 (2)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过这段代码可以看到， Array.prototype.push 实际上是一个属性复制的过程，把参数按照下标依次添加到被 push 的对象上面，顺便修改了这个对象的 length 属性。至于被修改的对象是谁，到底是数组还是类数组对象，这一点并不重要。<br>由此可以推断，我们可以把“任意”对象传入 Array.prototype.push ：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;&#125;;</span><br><span class="line">Array.prototype.push.call<span class="comment">( a, 'first' )</span>;</span><br><span class="line">alert <span class="comment">( a.length )</span>; <span class="comment">// 输出：1</span></span><br><span class="line">alert <span class="comment">( a[ 0 ] )</span>; <span class="comment">// first</span></span><br></pre></td></tr></table></figure><p>这段代码在绝大部分浏览器里都能顺利执行，但由于引擎的内部实现存在差异，如果在低版<br>本的 IE浏览器中执行，必须显式地给对象 a 设置 length 属性：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var a</span> = &#123;</span><br><span class="line">    length: 0</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>前面我们之所以把“任意”两字加了双引号，是因为可以借用 Array.prototype.push 方法的对象还要满足以下两个条件，从 ArrayPush 函数的(1)处和(2)处也可以猜到，这个对象至少还要满足：</p><ul><li>对象本身要可以存取属性；</li><li>对象的 length 属性可读写。<br>对于第一个条件，对象本身存取属性并没有问题，但如果借用 Array.prototype.push 方法的不是一个 object 类型的数据，而是一个 number 类型的数据呢? 我们无法在 number 身上存取其他数据，那么从下面的测试代码可以发现，一个 number 类型的数据不可能借用到 Array.prototype.push 方法：</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = <span class="number">1</span>;</span><br><span class="line">Array.prototype.push.call<span class="comment">( a, 'first' )</span>;</span><br><span class="line">alert <span class="comment">( a.length )</span>; <span class="comment">// 输出：undefined</span></span><br><span class="line">alert <span class="comment">( a[ 0 ] )</span>; <span class="comment">// 输出：undefined</span></span><br></pre></td></tr></table></figure><p>对于第二个条件，函数的 length 属性就是一个只读的属性，表示形参的个数，我们尝试把一个函数当作 this 传入 Array.prototype.push ：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="function"><span class="keyword">func</span> = <span class="title">function</span><span class="params">()</span>&#123;&#125;;</span></span><br><span class="line">Array.prototype.push.<span class="built_in">call</span>( <span class="function"><span class="keyword">func</span>, '<span class="title">first</span>' );</span></span><br><span class="line">alert ( <span class="function"><span class="keyword">func</span>.<span class="title">length</span> );</span></span><br><span class="line">// 报错：cannot <span class="built_in">assign</span> <span class="keyword">to</span> read only property ‘length’ of function()&#123;&#125;</span><br></pre></td></tr></table></figure><font color="#00ffff" size="6">End</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 JavaScript 编程中， this 关键字总是让初学者感到迷惑， Function.prototype.call 和&lt;br&gt;Function.prototype.apply 这两个方法也有着广泛的运用。我们有必要在学习设计模式之前先理解&lt;br&gt;这几个概念。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="this," scheme="http://myqilixiang.github.io/tags/this/"/>
    
      <category term="call," scheme="http://myqilixiang.github.io/tags/call/"/>
    
      <category term="apply" scheme="http://myqilixiang.github.io/tags/apply/"/>
    
  </entry>
  
  <entry>
    <title>git使用总结</title>
    <link href="http://myqilixiang.github.io/2017/08/24/git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://myqilixiang.github.io/2017/08/24/git使用总结/</id>
    <published>2017-08-24T06:31:21.000Z</published>
    <updated>2020-03-12T14:10:53.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Git工作流程"><a href="#一、Git工作流程" class="headerlink" title="一、Git工作流程"></a>一、Git工作流程</h1><p><img src="/assets/img/git-1.png" alt="git_1"><br>以上包括一些简单而常用的命令，但是先不关心这些，先来了解下面这4个专有名词。</p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><h3 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h3><p>程序员进行开发改动的地方，是你当前看到的，也是最新的。</p><p>平常我们开发就是拷贝远程仓库中的一个分支，基于该分支进行开发。在开发过程中就是对工作区的操作。</p><h3 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h3><p>.git目录下的index文件, 暂存区会记录<code>git add</code>添加文件的相关信息(文件名、大小、timestamp…)，不保存文件实体, 通过id指向每个文件实体。可以使用<code>git status</code>查看暂存区的状态。暂存区标记了你当前工作区中，哪些内容是被git管理的。</p><p>当你完成某个需求或功能后需要提交到远程仓库，那么第一步就是通过<code>git add</code>先提交到暂存区，被git管理。</p><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><p>保存了对象被提交 过的各个版本，比起工作区和暂存区的内容，它要更旧一些。<br><code>git commit</code>后同步index的目录树到本地仓库，方便从下一步通过<code>git push</code>同步本地仓库与远程仓库的同步。</p><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>远程仓库的内容可能被分布在多个地点的处于协作关系的本地仓库修改，因此它可能与本地仓库同步，也可能不同步，但是它的内容是最旧的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1、任何对象都是在工作区中诞生和被修改；<br>2、任何修改都是从进入index区才开始被版本控制；<br>3、只有把修改提交到本地仓库，该修改才能在仓库中留下痕迹；<br>4、与协作者分享本地的修改，可以把它们push到远程仓库来共享。<br>下面这幅图更加直接阐述了四个区域之间的关系，可能有些命令不太清楚，没关系，下部分会详细介绍。<br><img src="/assets/img/git-2.png" alt="git_2"></p><h1 id="二、常用Git命令"><a href="#二、常用Git命令" class="headerlink" title="二、常用Git命令"></a>二、常用Git命令</h1><p><img src="/assets/img/git-3.png" alt="git_3"></p><h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><p><img src="/assets/img/git-4.png" alt="git_4"><br>在掌握具体命令前，先理解下HEAD。<br>HEAD，它始终指向当前所处分支的最新的提交点。你所处的分支变化了，或者产生了新的提交点，HEAD就会跟着改变。</p><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p><img src="/assets/img/git-5.png" alt="git_5"><br>add相关命令很简单，主要实现将工作区修改的内容提交到暂存区，交由git管理。</p><blockquote><p>git add .       添加当前目录的所有文件到暂存区<br> git add [dir]    添加指定目录到暂存区，包括子目录<br> git add [file1]     添加指定文件到暂存区</p></blockquote><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p><img src="/assets/img/git-6.png" alt="git_6"><br>commit相关命令也很简单，主要实现将暂存区的内容提交到本地仓库，并使得当前分支的HEAD向后移动一个提交点。</p><blockquote><p>git commit -m [message] 提交暂存区到本地仓库,message代表说明信息<br>git commit [file1] -m [message] 提交暂存区的指定文件到本地仓库<br>git commit –amend -m [message] 使用一次新的commit，替代上一次提交</p></blockquote><h2 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h2><p><img src="/assets/img/git-7.png" alt="git_7"><br>涉及到协作，自然会涉及到分支，关于分支，大概有展示分支，切换分支，创建分支，删除分支这四种操作。</p><blockquote><p>git branch 列出所有本地分支<br>git branch -r 列出所有远程分支<br>git branch -a 列出所有本地分支和远程分支<br>git branch [branch-name] 新建一个分支，但依然停留在当前分支<br>git checkout -b [branch-name] 新建一个分支，并切换到该分支<br>git branch –track [branch][remote-branch] 新建一个分支，与指定的远程分支建立追踪关系<br>git checkout [branch-name] 切换到指定分支，并更新工作区<br>git branch -d [branch-name] 删除分支<br>git push origin –delete [branch-name] 删除远程分支</p></blockquote><p>关于分支的操作虽然比较多，但都比较简单好记。</p><p>##　merge<br><img src="/assets/img/git-8.png" alt="git_8"><br>merge命令把不同的分支合并起来。如上图，在实际开放中，我们可能从master分支中切出一个分支，然后进行开发完成需求，中间经过R3,R4,R5的commit记录，最后开发完成需要合入master中，这便用到了merge。</p><blockquote><p>git fetch [remote] merge之前先拉一下远程仓库最新代码<br>git merge [branch] 合并指定分支到当前分支</p></blockquote><p>一般在merge之后，会出现conflict，需要针对冲突情况，手动解除冲突。主要是因为两个用户修改了同一文件的同一块区域。如下图所示，需要手动解除。<br><img src="/assets/img/git-9.png" alt="git_9"></p><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p><img src="/assets/img/git-10.png" alt="git_10"><br>rebase又称为衍合，是合并的另外一种选择。</p><p>在开始阶段，我们处于new分支上，执行<code>git rebase dev</code>，那么new分支上新的commit都在master分支上重演一遍，最后checkout切换回到new分支。这一点与merge是一样的，合并前后所处的分支并没有改变。<code>git rebase dev</code>，通俗的解释就是new分支想站在dev的肩膀上继续下去。rebase也需要手动解决冲突。<br>现在我们有这样的两个分支,test和master，提交如下：</p><blockquote><p>D—E test<br>     /<br>A—B—C—F master</p></blockquote><p>在master执行git merge test,然后会得到如下结果：</p><blockquote><p>D——–E<br>     /          \<br>A—B—C—F—-G   test, master</p></blockquote><p>在master执行git rebase test，然后得到如下结果：</p><blockquote><p>A—B—D—E—C’—F’   test, master</p></blockquote><p>可以看到，merge操作会生成一个新的节点，之前的提交分开显示。而rebase操作不会生成新的节点，是将两个分支融合成一个线性的提交。</p><p>如果你想要一个干净的，没有merge commit的线性历史树，那么你应该选择git rebase<br>如果你想保留完整的历史记录，并且想要避免重写commit history的风险，你应该选择使用git merge</p><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p><img src="/assets/img/git-11.png" alt="git_11"><br>reset命令把当前分支指向另一个位置，并且相应的变动工作区和暂存区。</p><blockquote><p>git reset —soft [commit] 只改变提交点，暂存区和工作目录的内容都不改变<br>git reset —mixed [commit] 改变提交点，同时改变暂存区的内容<br>git reset —hard [commit] 暂存区、工作区的内容都会被修改到与提交点完全一致的状态<br>git reset –hard HEAD 让工作区回到上次提交时的状态</p></blockquote><h2 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h2><p><img src="/assets/img/git-12.png" alt="git_12"><br>git revert用一个新提交来消除一个历史提交所做的任何修改。</p><h3 id="revert与reset的区别"><a href="#revert与reset的区别" class="headerlink" title="revert与reset的区别"></a>revert与reset的区别</h3><p><img src="/assets/img/git-13.png" alt="git_13"></p><ul><li>git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit。</li><li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为git revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，减少冲突。但是git reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入，产生很多冲突。关于这一点，不太理解的可以看这篇文章。</li><li>git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li></ul><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>上传本地仓库分支到远程仓库分支，实现同步。</p><blockquote><p>git push [remote][branch] 上传本地指定分支到远程仓库<br>git push [remote] –force 强行推送当前分支到远程仓库，即使有冲突<br>git push [remote] –all 推送所有分支到远程仓库</p></blockquote><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><blockquote><p>git status 显示有变更的文件<br>git log 显示当前分支的版本历史<br>git diff 显示暂存区和工作区的差异<br>git diff HEAD 显示工作区与当前分支最新commit之间的差异<br>git cherry-pick [commit] 选择一个commit，合并进当前分支</p></blockquote><p>以上就是关于Git的一些常用命令及详细阐述，相信能对Git有一个初步的认识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、Git工作流程&quot;&gt;&lt;a href=&quot;#一、Git工作流程&quot; class=&quot;headerlink&quot; title=&quot;一、Git工作流程&quot;&gt;&lt;/a&gt;一、Git工作流程&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/assets/img/git-1.png&quot; alt=&quot;git_
      
    
    </summary>
    
    
      <category term="-git" scheme="http://myqilixiang.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>了解mvvm数据双向绑定</title>
    <link href="http://myqilixiang.github.io/2017/08/22/%E4%BA%86%E8%A7%A3mvvm%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>http://myqilixiang.github.io/2017/08/22/了解mvvm数据双向绑定/</id>
    <published>2017-08-22T01:17:04.000Z</published>
    <updated>2020-03-12T14:05:33.651Z</updated>
    
    <content type="html"><![CDATA[<p>先来看看最终实现效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mvvm-app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"word"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;word&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayHi"</span>&gt;</span>change model<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/observer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/watcher.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/compile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/mvvm.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> MVVM(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#mvvm-app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="actionscript">            word: <span class="string">'Hello World!'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="actionscript">            sayHi: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.word = <span class="string">'Hi, everybody!'</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/assets/img/mvvm-result.gif" alt="mvvm-gif"></p><h2 id="实现数据双向绑定的几种方法"><a href="#实现数据双向绑定的几种方法" class="headerlink" title="实现数据双向绑定的几种方法"></a>实现数据双向绑定的几种方法</h2><p>目前几种主流的mvc(vm)框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（input、textare等）添加了change(input)事件，来动态修改model和 view，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。<br>实现数据绑定的做法有大致如下几种：</p><blockquote><p>发布者-订阅者模式（backbone.js）<br>脏值检查（angular.js）<br>数据劫持（vue.js）</p></blockquote><p><strong>发布者-订阅者模式</strong>:一般通过sub, pub的方式实现数据和视图的绑定监听，更新数据方式通常做法是 vm.set(‘property’, value)<br>这种方式现在毕竟太low了，我们更希望通过<code>vm.property = value</code>这种方式更新数据，同时自动更新视图，于是有了下面两种方式<br><strong>脏值检查</strong>: angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下：</p><ul><li>DOM事件，譬如用户输入文本，点击按钮等。( ng-click )</li><li>XHR响应事件 ( $http )</li><li>浏览器Location变更事件 ( $location )</li><li>Timer事件( $timeout , $interval )</li><li>执行 $digest() 或 $apply()</li></ul><p><strong>数据劫持</strong>: vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p>##　思路整理<br>已经了解到vue是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过<code>Object.defineProperty()</code>来实现对属性的劫持，达到监听数据变动的目的，无疑这个方法是本文中最重要、最基础的内容之一，如果不熟悉defineProperty，猛戳<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">这里</a><br>整理了一下，要实现mvvm的双向绑定，就必须要实现以下几点：<br>1、实现一个数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者<br>2、实现一个指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数<br>3、实现一个Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图<br>4、mvvm入口函数，整合以上三者<br>绘制流程图如下：<br><img src="/assets/img/mvvm-2.png" alt="mvvm-process"></p><h3 id="1、实现Observer"><a href="#1、实现Observer" class="headerlink" title="1、实现Observer"></a>1、实现Observer</h3><p>ok, 思路已经整理完毕，也已经比较明确相关逻辑和模块功能了，let’s do it 我们知道可以利用Obeject.defineProperty()来监听属性变动 那么将需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter 这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化。。相关代码可以是这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">name</span>: <span class="string">'kindeng'</span>&#125;;</span><br><span class="line">observe(data);</span><br><span class="line">data.name = <span class="string">'dmq'</span>; <span class="comment">// 哈哈哈，监听到值变化了 kindeng --&gt; dmq</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取出所有属性遍历</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">     defineReactive(data, key, data[key]);</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="comment">// 监听子属性</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">        configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们已经可以监听每个数据的变化了，那么监听到变化之后就是怎么通知订阅者了，所以接下来我们需要实现一个消息订阅器，很简单，维护一个数组，用来收集订阅者，数据变动触发notify，再调用订阅者的update方法，代码改善之后是这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">    observe(val); <span class="comment">// 监听子属性</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        <span class="comment">// ... 省略</span></span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (val === newVal) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">            dep.notify(); <span class="comment">// 通知所有订阅者</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;,</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么问题来了，谁是订阅者？怎么往订阅器添加订阅者？ 没错，上面的思路整理中我们已经明确订阅者应该是Watcher, 而且<code>var dep = new Dep()</code>;是在 <code>defineReactive</code>方法内部定义的，所以想通过<code>dep</code>添加订阅者，就必须要在闭包内操作，所以我们可以在<code>getter</code>里面动手脚：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observer.js</span></span><br><span class="line"><span class="comment">// ...省略</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line"> get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 由于需要在闭包内添加watcher，所以通过Dep定义一个全局target属性，暂存watcher, 添加完移除</span></span><br><span class="line">  Dep.target &amp;&amp; dep.addDep(Dep.target);</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watcher.js</span></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line"> get: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  Dep.target = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.value = data[key]; <span class="comment">// 这里会触发属性的getter，从而添加订阅者</span></span><br><span class="line">  Dep.target = <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里已经实现了一个Observer了，已经具备了监听数据和数据变化通知订阅者的功能，<a href="https://github.com/Myqilixiang/mvvm/blob/master/js/observer.js" target="_blank" rel="noopener">完整代码</a>。那么接下来就是实现Compile了</p><h3 id="2、实现Compile"><a href="#2、实现Compile" class="headerlink" title="2、实现Compile"></a>2、实现Compile</h3><p>compile主要做的事情是解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图，如图所示：<br><img src="/assets/img/mvvm-3.png" alt="compiler"><br>因为遍历解析的过程有多次操作dom节点，为提高性能和效率，会先将跟节点<code>el</code>转换成文档碎片<code>fragment</code>进行解析编译操作，解析完成，再将<code>fragment</code>添加回原来的真实dom节点中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el = <span class="keyword">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$fragment = <span class="keyword">this</span>.node2Fragment(<span class="keyword">this</span>.$el);</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">        <span class="keyword">this</span>.$el.appendChild(<span class="keyword">this</span>.$fragment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Compile.prototype = &#123;</span><br><span class="line"> init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.compileElement(<span class="keyword">this</span>.$fragment); &#125;,</span><br><span class="line">    node2Fragment: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment(), child;</span><br><span class="line">        <span class="comment">// 将原生节点拷贝到fragment</span></span><br><span class="line">        <span class="keyword">while</span> (child = el.firstChild) &#123;</span><br><span class="line">            fragment.appendChild(child);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>compileElement方法将遍历所有节点及其子节点，进行扫描解析编译，调用对应的指令渲染函数进行数据渲染，并调用对应的指令更新函数进行绑定，详看代码及注释说明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Compile.prototype = &#123;</span><br><span class="line"> <span class="comment">// ... 省略</span></span><br><span class="line"> compileElement: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> childNodes = el.childNodes, me = <span class="keyword">this</span>;</span><br><span class="line">        [].slice.call(childNodes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> text = node.textContent;</span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>; <span class="comment">// 表达式文本</span></span><br><span class="line">            <span class="comment">// 按元素节点方式编译</span></span><br><span class="line">            <span class="keyword">if</span> (me.isElementNode(node)) &#123;</span><br><span class="line">                me.compile(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</span><br><span class="line">                me.compileText(node, <span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历编译子节点</span></span><br><span class="line">            <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class="line">                me.compileElement(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里通过递归遍历保证了每个节点及子节点都会解析编译到，包括了<code>{</code>{}<code>}</code>表达式声明的文本节点。指令的声明规定是通过特定前缀的节点属性来标记，如<code>&lt;span v-text=&quot;content&quot; other-attr</code>中<code>v-text</code>便是指令，而<code>other-attr</code>不是指令，只是普通的属性。 监听数据、绑定更新函数的处理是在<code>compileUtil.bind()</code>这个方法中，通过<code>new Watcher()</code>添加回调来接收数据变化的通知<br>至此，一个简单的Compile就完成了，<a href="https://github.com/Myqilixiang/mvvm/blob/master/js/compile.js" target="_blank" rel="noopener">完整代码</a>。接下来要看看Watcher这个订阅者的具体实现了</p><h3 id="3、实现Watcher"><a href="#3、实现Watcher" class="headerlink" title="3、实现Watcher"></a>3、实现Watcher</h3><p>Watcher订阅者作为Observer和Compile之间通信的桥梁，主要做的事情是:<br>1、在自身实例化时往属性订阅器(dep)里面添加自己<br>2、自身必须有一个update()方法<br>3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。 如果有点乱，可以回顾下前面的思路整理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm;</span><br><span class="line">    <span class="keyword">this</span>.exp = exp;</span><br><span class="line">    <span class="comment">// 此处为了触发属性的getter，从而在dep添加自己，结合Observer更易理解</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.get();</span><br><span class="line">&#125;</span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">    update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run(); <span class="comment">// 属性值变化收到通知</span></span><br><span class="line">    &#125;,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.get(); <span class="comment">// 取到最新值</span></span><br><span class="line">        <span class="keyword">var</span> oldVal = <span class="keyword">this</span>.value;</span><br><span class="line">        <span class="keyword">if</span> (value !== oldVal) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldVal); <span class="comment">// 执行Compile中绑定的回调，更新视图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Dep.target = <span class="keyword">this</span>; <span class="comment">// 将当前订阅者指向自己</span></span><br><span class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.vm[exp]; <span class="comment">// 触发getter，添加自己到属性订阅器中</span></span><br><span class="line">        Dep.target = <span class="literal">null</span>; <span class="comment">// 添加完毕，重置</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这里再次列出Observer和Dep，方便理解</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line"> get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 由于需要在闭包内添加watcher，所以可以在Dep定义一个全局target属性，暂存watcher, 添加完移除</span></span><br><span class="line">  Dep.target &amp;&amp; dep.addDep(Dep.target);</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">&#125;);</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update(); <span class="comment">// 调用订阅者的update方法，通知变化</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实例化<code>Watcher</code>的时候，调用<code>get()</code>方法，通过<code>Dep.target = watcherInstance</code>标记订阅者是当前watcher实例，强行触发属性定义的<code>getter</code>方法，getter方法执行的时候，就会在属性的订阅器<code>dep</code>添加当前watcher实例，从而在属性值有变化的时候，watcherInstance就能收到更新通知。</p><p>ok, Watcher也已经实现了，<a href="https://github.com/Myqilixiang/mvvm/blob/master/js/watcher.js" target="_blank" rel="noopener">完整代码</a>。 基本上vue中数据绑定相关比较核心的几个模块也是这几个，猛戳<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">这里</a> , 在<code>src</code>目录可找到vue源码。</p><p>最后来讲讲MVVM入口文件的相关逻辑和实现吧，相对就比较简单了~</p><h3 id="4、实现MVVM"><a href="#4、实现MVVM" class="headerlink" title="4、实现MVVM"></a>4、实现MVVM</h3><p>MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。<br>一个简单的MVVM构造器是这样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data;</span><br><span class="line">    observe(data, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里有个问题，从代码中可看出监听的数据对象是options.data，每次需要更新视图，则必须通过<code>var vm = new MVVM({data:{name: &#39;kindeng&#39;}}); vm._data.name = &#39;dmq&#39;;</code>这样的方式来改变数据。<br>显然不符合我们一开始的期望，我们所期望的调用方式应该是这样的： <code>var vm = new MVVM({data: {name: &#39;kindeng&#39;}}); vm.name = &#39;dmq&#39;;</code><br>所以这里需要给MVVM实例添加一个属性代理的方法，使访问vm的属性代理为访问vm._data的属性，改造后的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data, me = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 属性代理，实现 vm.xxx -&gt; vm._data.xxx</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        me._proxy(key);</span><br><span class="line">    &#125;);</span><br><span class="line">    observe(data, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MVVM.prototype = &#123;</span><br><span class="line"> _proxy: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(me, key, &#123;</span><br><span class="line">            configurable: <span class="literal">false</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            get: <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> me._data[key];</span><br><span class="line">            &#125;,</span><br><span class="line">            set: <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">                me._data[key] = newVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里主要还是利用了<code>Object.defineProperty()</code>这个方法来劫持了vm实例对象的属性的读写权，使读写vm实例的属性转成读写了<code>vm._data</code>的属性值，达到鱼目混珠的效果<br>至此，全部模块和功能已经完成了，如本文开头所承诺的两点。一个简单的MVVM模块已经实现，其思想和原理大部分来自经过简化改造的vue源码，猛戳<a href="https://github.com/Myqilixiang/mvvm" target="_blank" rel="noopener">这里</a>可以看到本文的所有相关代码。 由于本文内容偏实践，所以代码量较多，且不宜列出大篇幅代码，所以建议想深入了解的童鞋可以再次结合本文源代码来进行阅读，这样会更加容易理解和掌握。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要围绕“几种实现双向绑定的做法”、“实现Observer”、“实现Compile”、“实现Watcher”、“实现MVVM”这几个模块来阐述了双向绑定的原理和实现。并根据思路流程渐进梳理讲解了一些细节思路和比较关键的内容点，以及通过展示部分关键代码讲述了怎样一步步实现一个双向绑定MVVM。<br><a href="http://www.jianshu.com/p/04d77c6b64ee" target="_blank" rel="noopener">相关文章继续学习</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先来看看最终实现效果：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp
      
    
    </summary>
    
    
      <category term="mvvm" scheme="http://myqilixiang.github.io/tags/mvvm/"/>
    
  </entry>
  
  <entry>
    <title>vue组件封装及npm包发布</title>
    <link href="http://myqilixiang.github.io/2017/08/21/vue%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85%E5%8F%8Anpm%E5%8C%85%E5%8F%91%E5%B8%83/"/>
    <id>http://myqilixiang.github.io/2017/08/21/vue组件封装及npm包发布/</id>
    <published>2017-08-21T01:36:39.000Z</published>
    <updated>2020-03-12T14:12:12.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue组件封装"><a href="#vue组件封装" class="headerlink" title="vue组件封装"></a>vue组件封装</h1><p>vue2是基于web components标准的前端框架，它支持用户自定义组件，构建vue项目的过程中我们无处不在使用自定义组件，需要引入第三方组件库则需npm install,下面就简单介绍一下如何将自己自定义的组件按照vue制定的组件封装方式封装并发布到npm，这样便实现了自定义组件第三方化。<br>1、首先建一个自定义组件的文件夹，比如叫loading，里面有一个<code>index.js</code>，还有一个自定义组件<code>loading.vue</code>,在这个loading.vue里面就是这个组件的具体的内容，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        loading..............</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    div&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>:<span class="selector-id">#f60</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、在index.js中，规定使用这个组件的名字，以及使用方法，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> loadingComponent <span class="keyword">from</span> <span class="string">'./loading.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loading=&#123;</span><br><span class="line">    install:<span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>)</span>&#123;</span><br><span class="line">        Vue.component(<span class="string">'Loading'</span>,loadingComponent)</span><br><span class="line">    &#125;  <span class="comment">//'Loading'这就是后面可以使用的组件的名字，install是默认的一个方法</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> loading;</span><br></pre></td></tr></table></figure><p>3、经过1、2两个步骤就已经完成了组件的封装，只要在index.js中规定了install方法，就可以像一些公共的插件一样使用Vue.use()来使用，如：：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> loading <span class="keyword">from</span> <span class="string">'./loading'</span></span><br><span class="line"></span><br><span class="line">Vue.use(loading)</span><br></pre></td></tr></table></figure><p>这是在入口文件中引入的方法，可以看到就像vue-resource一样，可以在项目中的任何地方使用自定义的组件了，比如在home.vue中使用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;template&gt;</span></span><br><span class="line">    <span class="section">&lt;div&gt;</span></span><br><span class="line">        <span class="section">&lt;Loading&gt;</span><span class="section">&lt;/Loading&gt;</span></span><br><span class="line">    <span class="section">&lt;/div&gt;</span></span><br><span class="line"><span class="section">&lt;/template&gt;</span></span><br></pre></td></tr></table></figure><h1 id="npm包发布"><a href="#npm包发布" class="headerlink" title="npm包发布"></a>npm包发布</h1><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul><li>安装nodeJS</li><li>注册一个github账户用于托管代码</li><li>注册一个npm账户</li><li>开发你的module，更新至github</li><li>发布module至npm<br>安装nodeJS已经github账户的使用在此不做介绍，需要将自己准备发布的代码托管到github上，然后你需要注册一个npm账户，接下来说明发布过程：<br>终端进入到项目文件夹，执行<code>npm init</code>命令，构建模块的描述文件，系统会提示你输入所需的信息，不想输入就直接Enter跳过。这里主要的几个配置如下:</li><li><code>name</code>就是你要发布的module名；</li><li><code>version</code>版本信息（每发布一次版本号都必须大于上一次发布的版本号）；</li><li><code>entry</code>入口文件</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line"></span><br><span class="line">This utility will walk you through creating <span class="keyword">a</span> package.json <span class="built_in">file</span>.</span><br><span class="line">It only covers <span class="keyword">the</span> most common <span class="keyword">items</span>, <span class="keyword">and</span> tries <span class="built_in">to</span> guess sane defaults.</span><br><span class="line"></span><br><span class="line">See `npm help json` <span class="keyword">for</span> definitive documentation <span class="keyword">on</span> <span class="title">these</span> <span class="title">fields</span></span><br><span class="line"><span class="keyword">and</span> exactly what they <span class="built_in">do</span>.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt; <span class="comment">--save` afterwards to install a package and</span></span><br><span class="line">save <span class="keyword">it</span> <span class="keyword">as</span> <span class="keyword">a</span> dependency <span class="keyword">in</span> <span class="keyword">the</span> package.json <span class="built_in">file</span>.</span><br><span class="line"></span><br><span class="line">Press ^C <span class="keyword">at</span> <span class="keyword">any</span> <span class="built_in">time</span> <span class="built_in">to</span> quit.</span><br><span class="line">name: (node) easy_mongo</span><br><span class="line"><span class="built_in">version</span>: (<span class="number">0.0</span><span class="number">.0</span>) <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line">description: An easy mongodb client <span class="keyword">for</span> node.js based <span class="keyword">on</span> <span class="title">native</span> <span class="title">mongodb</span> <span class="title">driver</span>.</span><br><span class="line">entry point: (index.js)</span><br><span class="line">test <span class="keyword">command</span>: <span class="title">test</span></span><br><span class="line">git repository: <span class="keyword">https</span>://github.com/Myqilixiang/zsh-koa-cli.git</span><br><span class="line">keywords: koa2</span><br><span class="line">author: zsh</span><br><span class="line">license: (BSD<span class="number">-2</span>-Clause) MIT</span><br></pre></td></tr></table></figure><h3 id="npm注册"><a href="#npm注册" class="headerlink" title="npm注册"></a>npm注册</h3><p>输入完用户名，密码，邮箱后没有错误信息就完成了。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm adduser</span><br><span class="line"><span class="string">Username:</span> your name</span><br><span class="line"><span class="string">Password:</span> your password</span><br><span class="line"><span class="string">Email:</span> (<span class="keyword">this</span> IS <span class="keyword">public</span>) your email</span><br></pre></td></tr></table></figure><p>查询或者登陆别的用户命令</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> whoami</span><br><span class="line"><span class="built_in">npm</span> login</span><br></pre></td></tr></table></figure><h3 id="npm-module-发布"><a href="#npm-module-发布" class="headerlink" title="npm module 发布"></a>npm module 发布</h3><p>module开发完毕后，剩下的就是发布啦，进入项目根目录，输入命令。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> publish</span><br></pre></td></tr></table></figure><p>这里有时候会遇到几个问题,问题1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! no_perms Private mode enable, only admin can publish <span class="keyword">this</span> <span class="keyword">module</span>:</span><br></pre></td></tr></table></figure><p>这里注意的是因为国内网络问题，许多小伙伴把npm的镜像代理到淘宝或者别的地方了，这里要设置回原来的镜像。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span> <span class="attribute">registry</span>=http://registry.npmjs.org</span><br></pre></td></tr></table></figure><p>问题2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! you <span class="keyword">do</span> <span class="keyword">not</span> have permission <span class="keyword">to</span> publish <span class="string">"your module name"</span>. <span class="keyword">Are</span> you logged <span class="keyword">in</span> <span class="keyword">as</span> the correct <span class="keyword">user</span>?</span><br></pre></td></tr></table></figure><p>提示没有权限，其实就是你的module名在npm上已经被占用啦，这时候你就去需要去npm搜索你的模块名称，如果搜索不到，就可以用，并且把package.json里的name修改过来，重新npm publish，看到如下信息就表示安装完成了，zsh-koa-cli就是我的模块名。</p><ul><li><a href="mailto:zsh-koa-cli@0.1.0" target="_blank" rel="noopener">zsh-koa-cli@0.1.0</a><br>更新版本，发布</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> version <span class="number">0.1</span><span class="number">.1</span></span><br><span class="line"><span class="built_in">npm</span> publish</span><br></pre></td></tr></table></figure><h3 id="版本号规范"><a href="#版本号规范" class="headerlink" title="版本号规范"></a>版本号规范</h3><p>npm社区版本号规则采用的是semver（语义化版本），主要规则版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><ul><li>主版本号：当你做了不兼容的 API 修改，</li><li>次版本号：当你做了向下兼容的功能性新增，</li><li>修订号：当你做了向下兼容的问题修正。<br>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</li></ul><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>目前npm上开源的项目实在是太多，从中找出靠谱的项目要花费一定的精力跟时间去验证，所以开发者都会对自己的开源项目持续更新，并且经过测试的项目更加值得信赖。对于刚上线并且github上star星数很少的项目，使用者都会怀疑，这个项目靠谱不？所以这时候你需要告诉他，老子靠谱，怎么做？持续集成。</p><p>目前Github已经整合了持续集成服务travis，我们只需要在项目中添加.travis.yml文件，在下一次push之后，travis就会定时执行npm test来测试你的项目，并且会在测试失败的时候通知到你，你也可以把项目当前的状态显示在README.md中，让人一目了然，比如React里的<br><img src="/assets/img/npm-version.png" alt="npm-version"><br><code>.travis.yml</code> 是一个YAML文件，具体的相关的配置见This，例子如下：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  -<span class="ruby"> <span class="string">"6"</span></span></span><br><span class="line"><span class="ruby">  - <span class="string">"6.1"</span></span></span><br><span class="line"><span class="ruby">  - <span class="string">"5.11"</span></span></span><br><span class="line"><span class="ruby"><span class="symbol">services:</span></span></span><br><span class="line"><span class="ruby">  - mongodb</span></span><br></pre></td></tr></table></figure><p>  这个例子的是让travis在node.js的0.6.x，0.6.1，0.5.11三个版本下对项目进行测试，并且需要mongodb的服务。</p><p>  <font color="green" size="35">End</font><br>  至此你的一个module就开发完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue组件封装&quot;&gt;&lt;a href=&quot;#vue组件封装&quot; class=&quot;headerlink&quot; title=&quot;vue组件封装&quot;&gt;&lt;/a&gt;vue组件封装&lt;/h1&gt;&lt;p&gt;vue2是基于web components标准的前端框架，它支持用户自定义组件，构建vue项目的过程
      
    
    </summary>
    
    
      <category term="vue组件封装" scheme="http://myqilixiang.github.io/tags/vue%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/"/>
    
      <category term="npm发布" scheme="http://myqilixiang.github.io/tags/npm%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>自定义脚手架</title>
    <link href="http://myqilixiang.github.io/2017/08/18/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>http://myqilixiang.github.io/2017/08/18/自定义脚手架/</id>
    <published>2017-08-18T07:57:41.000Z</published>
    <updated>2020-03-12T14:07:50.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在实际的开发过程中，从零开始建立项目的结构是一件让人头疼的事情，所以各种各样的脚手架工具应运而生。笔者使用较多的yoeman，express-generator和vue-cli便是当中之一。它们功能丰富，但最核心的功能都是能够快速搭建一个完整的项目的结构，开发者只需要在生成的项目结构的基础上进行开发即可，非常简单高效。之前已经上传了koa-boilerplate项目，是一个koa2的模板，此次将其构建为脚手架，并发布。</p><h2 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h2><p>脚手架功能其实就是将模板文件拷贝到本地，模板可以内置在脚手架中，也可以部署在远程仓库。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li><code>node.js</code>：整个脚手架工具的根本组成部分，推荐使用最新的版本。</li><li><code>es6</code>：新版本的node.js对于es6的支持度已经非常高，使用es6能够极大地提升开发效率和开发感受。</li><li><code>commander</code>：TJ大神开发的工具，能够更好地组织和处理命令行的输入。</li><li><code>co</code>：TJ大神开发的异步流程控制工具，用更舒服的方式写异步代码。</li><li><code>co-prompt</code>：还是TJ大神的作品……传统的命令行只能单行一次性地输入所有参数和选项，使用这个工具可以自动提供提示信息，并且分步接收用户的输入，体验类似npm init时的一步一步输入参数的过程。</li></ul><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p>架构图如下：<br><img src="/assets/img/construct.jpg" alt="construct"><br>首先明白<code>模版</code>的概念。一个模版就是一个项目的样板，包含项目的完整结构和信息。<br>模版的信息都存放在一个叫做<code>templates.json</code>的文件当中。<br>用户可以通过命令行对<code>templates.json</code>进行添加、删除、罗列的操作。<br>通过选择不同的模版，koa-init会自动从远程仓库把相应的模板拉取到本地，完成项目的搭建。<br>最终整个脚手架的文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">=================</span><br><span class="line"> |__ bin</span><br><span class="line">   |__ koa</span><br><span class="line"> |__ command</span><br><span class="line">   |__ add.js</span><br><span class="line">   |__ delete.js</span><br><span class="line">   |__ init.js</span><br><span class="line">   |__ list.js</span><br><span class="line"> |__ node_modules</span><br><span class="line"> |__ package.json</span><br><span class="line"> |__ templates.json</span><br></pre></td></tr></table></figure><h2 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h2><p>首先建立项目，在<code>package.json</code>里面写入依赖并执行<code>npm install</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"chalk"</span>: <span class="string">"^1.1.3"</span>,</span><br><span class="line">    <span class="string">"co"</span>: <span class="string">"^4.6.0"</span>,</span><br><span class="line">    <span class="string">"co-prompt"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"commander"</span>: <span class="string">"^2.9.0"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  在根目录下建立<code>\bin</code>文件夹，在里面建立一个无后缀名的koa文件。这个<code>bin\koa</code>文件是整个脚手架的入口文件，所以我们首先对它进行编写。<br>  首先是一些初始化的代码：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  #!<span class="regexp">/usr/</span>bin/env node --harmony</span><br><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"> <span class="comment">// 定义脚手架的文件路径</span></span><br><span class="line">process.env.NODE_PATH = __dirname + <span class="string">'/../node_modules/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 定义当前版本</span></span><br><span class="line">program</span><br><span class="line">    .version(<span class="built_in">require</span>(<span class="string">'../package'</span>).version )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义使用方法</span></span><br><span class="line">program</span><br><span class="line">    .usage(<span class="string">'&lt;command&gt;'</span>)</span><br></pre></td></tr></table></figure><p>从前文的架构图中可以知道，脚手架支持用户输入4种不同的命令。现在我们来写处理这4种命令的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">    .command(<span class="string">'add'</span>)</span><br><span class="line">    .description(<span class="string">'Add a new template'</span>)</span><br><span class="line">  .alias(<span class="string">'a'</span>)</span><br><span class="line">  .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'../command/add'</span>)()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">    .command(<span class="string">'list'</span>)</span><br><span class="line">    .description(<span class="string">'List all the templates'</span>)</span><br><span class="line">    .alias(<span class="string">'l'</span>)</span><br><span class="line">    .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'../command/list'</span>)()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">    .command(<span class="string">'init'</span>)</span><br><span class="line">    .description(<span class="string">'Generate a new project'</span>)</span><br><span class="line">  .alias(<span class="string">'i'</span>)</span><br><span class="line">  .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'../command/init'</span>)()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">    .command(<span class="string">'delete'</span>)</span><br><span class="line">    .description(<span class="string">'Delete a template'</span>)</span><br><span class="line">    .alias(<span class="string">'d'</span>)</span><br><span class="line">    .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'../command/delete'</span>)()</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><code>commander</code>的具体使用方法在这里就不展开了，可以直接到<a href="https://github.com/tj/commander" target="_blank" rel="noopener">官网</a>去看详细的文档。<br>最后别忘了处理参数和提供帮助信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">program.parse(process.argv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!program.args.length)&#123;</span><br><span class="line">  program.help()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的代码请看<a href="https://github.com/Myqilixiang/zsh-koa-cli/blob/master/bin/koa" target="_blank" rel="noopener">这里</a>。<br>使用<code>node</code>运行这个文件，看到输出如下，证明入口文件已经编写完成了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Usage: koa-init &lt;command&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Commands:</span><br><span class="line"></span><br><span class="line">    add|a      Add a <span class="keyword">new</span> template</span><br><span class="line">    list|l     List all the templates</span><br><span class="line">    init|i     Generate a <span class="keyword">new</span> project</span><br><span class="line">    <span class="keyword">delete</span>|d   Delete a template</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">    -h, --help     output usage information</span><br><span class="line">    -V, --version  output the version number</span><br></pre></td></tr></table></figure><h2 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h2><p>在项目根目录下建立<code>\command</code>文件夹，专门用来存放命令处理文件。<br>在根目录下建立<code>templates.json</code>文件并写入如下内容，用来存放模版信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"tpl"</span>:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="添加模板"><a href="#添加模板" class="headerlink" title="添加模板"></a>添加模板</h2><p>进入<code>\command</code>并新建<code>add.js</code>文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>)</span><br><span class="line"><span class="keyword">const</span> prompt = <span class="built_in">require</span>(<span class="string">'co-prompt'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../templates'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"> co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 分步接收用户输入的参数</span></span><br><span class="line">   <span class="keyword">let</span> tplName = <span class="keyword">yield</span> prompt(<span class="string">'Template name: '</span>)</span><br><span class="line">   <span class="keyword">let</span> gitUrl = <span class="keyword">yield</span> prompt(<span class="string">'Git https link: '</span>)</span><br><span class="line">   <span class="keyword">let</span> branch = <span class="keyword">yield</span> prompt(<span class="string">'Branch: '</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 避免重复添加</span></span><br><span class="line">   <span class="keyword">if</span> (!config.tpl[tplName]) &#123;</span><br><span class="line">     config.tpl[tplName] = &#123;&#125;</span><br><span class="line">     config.tpl[tplName][<span class="string">'url'</span>] = gitUrl.replace(<span class="regexp">/[\u0000-\u0019]/g</span>, <span class="string">''</span>) <span class="comment">// 过滤unicode字符</span></span><br><span class="line">     config.tpl[tplName][<span class="string">'branch'</span>] = branch</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(chalk.red(<span class="string">'Template has already existed!'</span>))</span><br><span class="line">     process.exit()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 把模板信息写入templates.json</span></span><br><span class="line">   fs.writeFile(__dirname + <span class="string">'/../templates.json'</span>, <span class="built_in">JSON</span>.stringify(config), <span class="string">'utf-8'</span>, (err) =&gt; &#123;</span><br><span class="line">     <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err)</span><br><span class="line">     <span class="built_in">console</span>.log(chalk.green(<span class="string">'New template added!\n'</span>))</span><br><span class="line">     <span class="built_in">console</span>.log(chalk.grey(<span class="string">'The last template list is: \n'</span>))</span><br><span class="line">     <span class="built_in">console</span>.log(config)</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">     process.exit()</span><br><span class="line">    &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除模板"><a href="#删除模板" class="headerlink" title="删除模板"></a>删除模板</h2><p>同样的，在<code>\command</code>文件夹下建立<code>delete.js</code>文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>)</span><br><span class="line"><span class="keyword">const</span> prompt = <span class="built_in">require</span>(<span class="string">'co-prompt'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../templates'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 接收用户输入的参数</span></span><br><span class="line">        <span class="keyword">let</span> tplName = <span class="keyword">yield</span> prompt(<span class="string">'Template name: '</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除对应的模板</span></span><br><span class="line">        <span class="keyword">if</span> (config.tpl[tplName]) &#123;</span><br><span class="line">            config.tpl[tplName] = <span class="literal">undefined</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(chalk.red(<span class="string">'Template does not exist!'</span>))</span><br><span class="line">            process.exit()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入template.json</span></span><br><span class="line">        fs.writeFile(__dirname + <span class="string">'/../templates.json'</span>, <span class="built_in">JSON</span>.stringify(config),     <span class="string">'utf-8'</span>, (err) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err)</span><br><span class="line">            <span class="built_in">console</span>.log(chalk.green(<span class="string">'Template deleted!'</span>))</span><br><span class="line">            <span class="built_in">console</span>.log(chalk.grey(<span class="string">'The last template list is: \n'</span>))</span><br><span class="line">            <span class="built_in">console</span>.log(config)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">            process.exit()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="罗列模板"><a href="#罗列模板" class="headerlink" title="罗列模板"></a>罗列模板</h2><p>建立<code>list.js</code>文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../templates'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(config.tpl)</span><br><span class="line">     process.exit()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><p>现在来到我们最重要的部分——构建项目。同样的，在<code>\command</code>目录下新建一个叫做<code>init.js</code>的文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; prompt &#125; = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; writeFile &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; listTable &#125; = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../utils`</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>)</span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tplList = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> question = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    name: <span class="string">'name'</span>,</span><br><span class="line">    message: <span class="string">'Template name:'</span>,</span><br><span class="line">    validate (val) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tplList[val]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Name is required!'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!tplList[val]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'This template doesn\'t exists.'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    name: <span class="string">'project'</span>,</span><br><span class="line">    message: <span class="string">'Project name:'</span>,</span><br><span class="line">    validate (val) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val !== <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Project name is required!'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    name: <span class="string">'place'</span>,</span><br><span class="line">    message: <span class="string">'Where to init the project:'</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'./'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = prompt(question).then(<span class="function">(<span class="params">&#123; name, project, place &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> gitPlace = tplList[name][<span class="string">'owner/name'</span>]</span><br><span class="line">  <span class="keyword">const</span> gitBranch = tplList[name][<span class="string">'branch'</span>]</span><br><span class="line">  <span class="keyword">const</span> spinner = ora(<span class="string">'Downloading template...'</span>)</span><br><span class="line"></span><br><span class="line">  spinner.start()</span><br><span class="line"></span><br><span class="line">  download(<span class="string">`<span class="subst">$&#123;gitPlace&#125;</span>#<span class="subst">$&#123;gitBranch&#125;</span>`</span>, <span class="string">`<span class="subst">$&#123;place&#125;</span>/<span class="subst">$&#123;project&#125;</span>`</span>, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chalk.red(err))</span><br><span class="line">      process.exit()</span><br><span class="line">    &#125;</span><br><span class="line">    spinner.stop()</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.green(<span class="string">'New project has been initialized successfully!'</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里使用了<a href="https://github.com/flipxfx/download-git-repo" target="_blank" rel="noopener">download-git-repo</a>用于从远程仓库克隆到自定义目录。</p><h2 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h2><p>为了可以全局使用，我们需要在<code>package.json</code>里面设置一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"bin"</span>: &#123;</span><br><span class="line">    <span class="string">"koa-init"</span>: <span class="string">"bin/koa"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>  本地调试的时候，在根目录下执行</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure><p>  即可把koa-cli命令绑定到全局，以后就可以直接以koa-init作为命令开头而无需敲入长长的node koa之类的命令了。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>  将完成的项目部署在git上</p><h2 id="发布脚手架"><a href="#发布脚手架" class="headerlink" title="发布脚手架"></a>发布脚手架</h2><p>  参考<a href="https://segmentfault.com/a/1190000006250554" target="_blank" rel="noopener">npm包发布</a>发布脚手架</p><h2 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h2><p>  发布成功后，运行下列命令安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install zsh-koa --save</span><br></pre></td></tr></table></figure><p>  构建工程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh-koa init</span><br></pre></td></tr></table></figure><p>  按照提示输入工程名和下载位置<br>  <font color="#00ffff" size="6">End</font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在实际的开发过程中，从零开始建立项目的结构是一件让人头疼的事情，所以各种各样的脚手架工具应运而生。笔者使用较多的yoeman，express
      
    
    </summary>
    
    
      <category term="commander" scheme="http://myqilixiang.github.io/tags/commander/"/>
    
      <category term="init - cli" scheme="http://myqilixiang.github.io/tags/init-cli/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL vs REST</title>
    <link href="http://myqilixiang.github.io/2017/08/16/REST-GraphQL/"/>
    <id>http://myqilixiang.github.io/2017/08/16/REST-GraphQL/</id>
    <published>2017-08-16T02:12:44.000Z</published>
    <updated>2020-03-12T14:12:02.827Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GraphQL是什么"><a href="#GraphQL是什么" class="headerlink" title="GraphQL是什么"></a>GraphQL是什么</h3><p>GraphQL 是一门语言。 如果我们传授 GraphQL 语言给一款应用，这款应用就能够向支持 GraphQL 的后端数据服务声明式传达数据需求。<br>为了让数据服务支持 GraphQL，我们需要实现一个运行时层并将它暴露给想要与服务通信的客户端。可以将这个添加到服务端的层简单地看作是一位 GraphQL 语言翻译员，或代表数据服务并会说 GraphQL 语言的代理。GraphQL 并不是一个存储引擎，所以它不能作为一个独立的解决方案。这就是我们不能有一个纯粹的 GraphQL 服务，而需要实现一个翻译运行时的原因。</p><p>这个层可以用任何语言编写，它定义了一个通用的基于图的模板来发布它所代表的数据服务的功能。支持 GraphQL 的客户端可以在功能允许的范围内使用这种模版进行查询。这一策略可以将客户端与服务端分离，允许两者独立开发和扩展。</p><p>一个 GraphQL 请求既可以是查询（读操作），也可以是修改（写操作）。不管是何种情形，请求均只是一个带有特定格式的简单字符串，GraphQL 服务器可以对其进行解析、执行、处理。在移动和 Web 应用中最常见的响应格式是 JSON 。</p><h3 id="REST-API-有什么错"><a href="#REST-API-有什么错" class="headerlink" title="REST API 有什么错"></a>REST API 有什么错</h3><p>REST API 最大的问题是其天然倾向多端点。这造成客户端需要多次往返获取数据。</p><p>REST API 通常由多个端点组成，每个端点代表一种资源。因此，当客户端需要多个资源时，它需要向 REST API 发起多个请求，才能获取到所需要的数据。</p><p>在 REST API 中，是没有描述客户端请求的语言的。客户端无法控制服务器返回哪些数据。没有让客户端对返回数据进行控制的语言。更确切的说，客户端能使用的语言是很有限的。<br>例如，有如下进行读取操作的 REST API：</p><ul><li>GET /ResouceName - 从该资源获取包含所有记录的列表</li><li>GET /ResourceName/ResourceID - 通过 ID 获取某条特定记录</li></ul><p>例如，客户端是不能够指定从该资源的记录中选择哪些字段的。信息仅存在于提供 REST API 的服务中，该服务将始终返回所有字段，而不管客户端需要什么。借用 GraphQL 术语描述这个问题：超额获取(over-fetching) 没用的信息。这浪费了服务器和客户端的网络内存资源</p><p>REST API 的另一个大问题就是版本控制了。如果你需要支持多版本，那你就需要为此创建多个新的端点。这会导致这些端点很难使用和维护，此外，还造成服务端出现很多冗余代码。</p><p>上面列出的一些 REST API 带来的问题都是 GraphQL 试图解决的。这并不是 REST API 带来的全部问题，我也不打算说明 REST API 是什么不是什么。我只是在谈论一种最流行的基于资源的 HTTP 终点 API。这些 API 最终都会变成一种具有常规 REST 特性的端点和出于性能原因定制的特殊端点的组合。</p><h3 id="GraphQL-如何实现其魔力"><a href="#GraphQL-如何实现其魔力" class="headerlink" title="GraphQL 如何实现其魔力"></a>GraphQL 如何实现其魔力</h3><p>在 GraphQL 背后有很多的概念和设计策略，这儿列举了一些最重要的：</p><ul><li>GraphQL 模板是强类型的。要创建一套 GraphQL 模板，我们需要定义了一些带有类型的字段。这些类型可以是原始数据类型也可以是自定义的，在模板中一切均需要类型。丰富的类型系统带来了丰富的特性，如 API 自证，这让我们能够为客户端和服务端创建强大的工具。</li><li>GraphQL 以图的形式组织数据，数据自然形成图。如果你需要一个结构描述数据，图是一种不错的选择。GraphQL 运行时让我们能够使用与该数据的自然图结构匹配的图 API 来表示我们的数据。</li><li>GraphQL 具有表达数据需求声明性质。GraphQL 让客户端能够以一种声明性的语言描述其对数据的需求。这种声明性带来了一种围绕着 GraphQL 语言使用的心智模型，该模型与我们用自然语言思考数据需求的方式接近，让我们使用 GraphQL 时比使用其它方式更容易。<br>最后一个概念是我为什么认为 GraphQL 是游戏规则改变者的原因。</li></ul><p>这些全是抽象概念。让我们深入到细节中。</p><p>为了解决多次往返请求的问题，GraphQL 让响应服务器变成一个端点。本质上，GraphQL 把自定义端点这一思想发挥到了极致，它让这个端点能够回复所有数据问题。</p><p>伴随着单个端点这一概念的另一个重要概念是需要一种强大的客户端请求描述语言与自定义的单个端点进行通信。缺少客户端请求描述语言，单个端点是没有意义的。它需要一种语言解析自定义请求以及根据自定义请求返回数据。</p><p>拥有一门客户端请求描述语言意味这客户端能够对请求进行控制。客户端能够精确表达它们需要什么，服务端也能精准回复客户端需要的。这就解决了超额获取的问题。</p><p>当涉及到版本时，GraphQL 提供了一种有趣的解决方式。版本能够被完全避免。基本上，我们只需要在保留老的字段的基础上添加新字段即可，因为我们用的是图，我们能很灵活的在图上添加更多节点。因此，我们可以在图上留下旧的 API，并引入新的 API，而不会将其标记为新版本。API 只是多了更多节点。</p><p>这点对于移动端尤为重用，因为我们无法充值这些移动端使用的版本。一经安装，移动端应用可能数年都使用老版本 API 。对于 Web，我们可以通过发布新代码简单的控制 API　版本，对于移动端应用，这点很难做到。</p><p>还没有完全相信？ 结合实例一对一对比 GraphQL 和 REST 怎么样？</p><h3 id="REST-风格-API-vs-GraphQL-API-——-案例"><a href="#REST-风格-API-vs-GraphQL-API-——-案例" class="headerlink" title="REST 风格 API vs GraphQL API —— 案例"></a>REST 风格 API vs GraphQL API —— 案例</h3><p>我们假设我们是开发者，负责构建闪亮全新的用户界面，用来展示星球大战影片和角色。</p><p>我们要构建的第一份 UI 很简单：一个显示单个星球大战角色的信息视图。例如，达斯·维德以及电影中出场的其他角色。这个视图需要显示角色的姓名、出生年份、母星名、以及出场的所有影片中出现的头衔。</p><p>听起来很简单，我们实际上已经需要处理三种不同的资源：人物、星球和电影。资源之间的关系很简单，任何人都很容易就猜出这里的数据组成。</p><p>此 UI 的 JSON 数据可能类似于：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"person"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Darth Vader"</span>,</span><br><span class="line">      <span class="attr">"birthYear"</span>: <span class="string">"41.9BBY"</span>,</span><br><span class="line">      <span class="attr">"planet"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Tatooine"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"films"</span>: [</span><br><span class="line">        &#123; <span class="attr">"title"</span>: <span class="string">"A New Hope"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">"title"</span>: <span class="string">"The Empire Strikes Back"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">"title"</span>: <span class="string">"Return of the Jedi"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">"title"</span>: <span class="string">"Revenge of the Sith"</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设数据服务按照上面的结构返回数据给我们。我们有一种可行的方式即使用 React.js 来展现视图：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Container Component:</span></span><br><span class="line">&lt;PersonProfile person=&#123;data.person&#125; &gt;&lt;/PersonProfile&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The PersonProfile Component:</span></span><br><span class="line">Name: &#123;person.name&#125;</span><br><span class="line">Birth Year: &#123;person.birthYear&#125;</span><br><span class="line">Planet: &#123;person<span class="selector-class">.planet</span><span class="selector-class">.name</span>&#125;</span><br><span class="line">Films: &#123;person<span class="selector-class">.films</span><span class="selector-class">.map</span>(film =&gt; film.title)&#125;</span><br></pre></td></tr></table></figure><p>这是一个简单例子，此外我们关于星球大战的经验也能帮我们一点忙，我们可以很清楚的明白 UI 和数据之间的关系。与我们想象一致，UI 是使用了 JSON 数据对象中的全部的键。</p><p>让我们来看看如何通过 REST 风格 API 获取这些数据。</p><p>我们需要单个角色的信息，假设我们知道这个角色的 ID，REST 风格的 API 倾向于这样输出这些信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> - /people/&#123;id&#125;</span><br></pre></td></tr></table></figure><p>这个请求将会返回角色的姓名、出生年份以及一些其它信息给我们。一个规范的 REST 风格 API 将会返回给我们角色星球的 ID 以及该角色出现过的所有影片的 ID 组成的数组。</p><p>这个请求以 JSON 格式返回的响应类似于：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Darth Vader"</span>,</span><br><span class="line">  <span class="string">"birthYear"</span>: <span class="string">"41.9BBY"</span>,</span><br><span class="line">  <span class="string">"planetId"</span>: <span class="number">1</span></span><br><span class="line">  <span class="string">"filmIds"</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">  *** 其它信息我们不需要 ***</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后为了获取星球名称，我们发起请求：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> - /planets/1</span><br></pre></td></tr></table></figure><p>接着为了获取影片中的头衔，我们发起请求：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> - /films/1</span><br><span class="line"><span class="builtin-name">GET</span> - /films/2</span><br><span class="line"><span class="builtin-name">GET</span> - /films/3</span><br><span class="line"><span class="builtin-name">GET</span> - /films/6</span><br></pre></td></tr></table></figure><p>当从服务器接受到所有的六个数据后，我们才能将其组合并生成满足视图需要的数据。</p><p>除了有需要六次往返才能获取到满足一个简单 UI 需求的数据这一事实外，这种方式并无不可。我们阐明了如何获取数据，以及如何处理数据使其满足视图需要。</p><p>如果你想确认我说的你可以自己动手尝试。有一个部署在 swapi.co/ 上的 REST API 服务提供了星球大战的数据，点进去，在里面尝试构造角色数据。数据的键名可能不同，但 API 端点是一致的。你同样需要进行六次 API 调用。同样，你不得不超额获取视图不需要的信息。</p><p>当然，这只是 REST API 的一个实现方式，可能有更好的实现让生成视图更简单。例如，如果 API 服务支持资源嵌套并能理解角色和影片之间的关系，我们能够通过这种方式获取影片数据：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET - <span class="string">/people/</span>&#123;id&#125;<span class="string">/films</span></span><br></pre></td></tr></table></figure><p>然而，一个纯粹的 REST API 服务很难实现这点。我们需要让后端工程师为我们创建自定义端点。这造成 REST API 规模不断增长这一事实 —— 为了满足不断增长的客户端的需要，我们不断添加自定义端点。管理这些自定义端点很难。</p><p>让我们来看一看 GraphQL 策略。GraphQL 在服务端拥抱自定义端点思想并把它发展到极致。服务将只是一个端点，通道变得没有意义。如果我们使用 HTTP 实现，HTTP 方法将失去意义。假设我们有一个单一的 GraphQL 端点，它的 HTTP 地址是 /graphql</p><p>因为我们希望一次往返获取需要的数据，所以我们需要明明白白告诉服务器我们需要哪些数据。我们通过 GraphQL 进行查询：</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GET</span> <span class="keyword">or</span> <span class="type">POST</span> - /graphql?query=<span class="meta">&#123;...&#125;</span></span><br></pre></td></tr></table></figure><p>GraphQL 查询只是字符串，但它将包含我们需要的全部数据。这就是声明的强大之处。</p><p>英语中，我们这样阐述数据需求：<strong>我们需要角色名、出生年份、星球名和在所有出现过的影片中的头衔</strong>。通过 GraphQL，我们进行如下转换：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  person(<span class="name">ID:</span> ...) &#123;</span><br><span class="line">    name,</span><br><span class="line">    birthYear,</span><br><span class="line">    planet &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;,</span><br><span class="line">    films &#123;</span><br><span class="line">      title</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再细读一次英语表述的需求并与 GraphQL 查询进行对比。它们不能再更接近了。现在，将 GraphQL 查询与我们最开始用到的原始 JSON 数据进行对比。GraphQL 查询完全与 JSON 数据结构相对应，不过排除所有是值的部分。如果我们仿照问题与答案关系来考虑这中情况，那问题就是没有具体答案的答案原语。<br>如果答案是：</p><blockquote><p>离太阳最近的星球是水星。<br>一种好的提问方式是保留原话只去掉提问部分：<br>哪个星球里太阳最近？<br>这种关系同样适用于 GraphQL 查询。拿着 JSON 格式的响应数据，移除所有是答案的部分（作为值的对象），最后你得到了一个非常适合代表关于 JSON 响应问题的 GraphQL 查询。<br>现在，将 GraphQL 查询和与我们展示数据的声明性 React UI 对比。所有出现在 GraphQL 查询中的数据都出现在了 UI 中。所有出现在 UI 中的数据都出现在了 GraphQL 查询中。</p></blockquote><p>这就是 GraphQL 强大的心智模型。UI 知晓它所需要的确切数据，提取需要的数据也很容易。编写 GraphQL 查询变成一个从 UI 中提取作为变量这一简单的工作。</p><p>将模型进行反转，它仍然很强大。如果我们知道了 GraphQL 查询，我们同样知道如何在 UI 中使用相应数据。我们不需要分析响应数据就能使用它，也不需要的这些 API 的文档。这一切都是内建的。</p><p>获取星球大战数据的 GraphQL 托管在 github.com/graphql/swa…。点击进去并尝试构造角色数据。只有一点点不同，我们之后会谈论，以下是可以从这个 API 中获取视图所需要数据的正式查询（使用达斯·维德举例）</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  person(<span class="name">personID:</span> <span class="number">4</span>) &#123;</span><br><span class="line">    name,</span><br><span class="line">    birthYear,</span><br><span class="line">    homeworld &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;,</span><br><span class="line">    filmConnection &#123;</span><br><span class="line">      films &#123;</span><br><span class="line">        title</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个请求返回的我们的响应数据结构十分接近视图用到的，记住，这些数据是我们通过一次往返获得的。</p><h3 id="GraphQL-灵活性带来的开销"><a href="#GraphQL-灵活性带来的开销" class="headerlink" title="GraphQL 灵活性带来的开销"></a>GraphQL 灵活性带来的开销</h3><p>完美的解决方案是不存在的。GraphQL 带来了灵活性，也带来了一些明确的问题和考量。</p><p>GraphQL更容易的造成一个安全隐患是资源耗尽型攻击（拒绝服务攻击）。GraphQL 服务器可能会受到伴随着极其复杂的查询的攻击，造成服务器资源耗尽。很容易就能构造一个深度嵌套关系链（用户 -&gt; 好友 -&gt; 好友的好友。) 或者多次通过字段别名请求同一字段的查询。资源耗尽型攻击并没有限定 GraphQL，但是在使用 GraphQL 时，我们要特别小心。</p><p>这儿有一些缓解措施我们可以用上。我们可以进行一些高级查询的开销分析，对单个用户请求的数据量做某种限制。我们也可以实现一种机制对需要很长时间处理的请求进行超时处理。此外，考虑到 GraphQL 就只是一个处理层，我们能在 GraphQL 之下的更底层进行速率限制。</p><p>如果我们尝试保护的 GraphQL API 端点并不是公开的，仅供我们私有的客户端（web、移动）内部访问，我们能够使用白名单策略并预先审核服务器能够处理的查询。客户端仅能通过唯一查询标识码向服务器发起审核过的查询。Facebook 似乎就采用了这种策略。</p><p>当使用 GraphQL 时，我们还需要考虑到认证和授权。我们是在 GraphQL 解析请求之前，之后还是之间处理它们呢？</p><p>为了回答这个问题，需要将 GraphQL 想象成你一种位于你的后端数据请求逻辑顶层的 DSL（领域限定语言）。它只是一个能够被我们放在客户端与实际数据服务（多个）之间的处理层。</p><p>将认证和授权当成另一个处理层。GraphQL 与认证和授权逻辑的具体实现关系不大。它的意义不在这儿。但是如果我们把这些层放在 GraphQL 之后，我们就可以在 GraphQL 层使用访问令牌连通客户端与执行逻辑。这和我们在 REST 风格 API 处理认证和授权类似。</p><p>另一件因为 GraphQL 而变得更具挑战性的任务是客户端数据缓存。REST 风格的 API 因其类似目录更容易进行缓存处理。REST API 通过访问路径获取数据，我们能够使用访问路径作缓存键。</p><p>对于 GraphQL，我们能够采用类似的策略使用查询字段作为响应数据的缓存键。但是这种方式有限制，效率低下，还容易造成数据一致性方面的问题。原因是多个 GraphQL 查询的结果很容易重叠，而这种缓存策略并没有考虑到这种重叠。</p><p>这个问题有一个很好的解决方案。一个图的查询意味这一个图的缓存。如果我们将一个 GraphQL 查询的响应数据正则化为一个平铺的记录集合，为每个记录设置一个全局唯一 ID，我们就能够只缓存这些记录而不用缓存整个响应了。</p><p>这种处理并不容易。这样导致一些记录指向另一些记录，导致我们可能得管理一个环形图，导致在写入和读取缓存时我们需要进行遍历，导致我们需要编写一个层来处理缓存逻辑。但是，这种方法总体上比基于响应的缓存更高效。Relay.js 就是一个采用这种缓存策略并在内部进行自动管理的框架。</p><p>对于 GraphQL 我们最需要关心的问题可能是被普遍称作 N+1 SQL 查询的问题了。GraphQL 的字段查询被设计成独立的函数，从数据库获取这些字段可能造成每个字段都需要一个数据库查询。</p><p>简单 REST 风格 API 端点的逻辑，易分析，易检测，可以优化 SQL 查询语句来解决 N+1 问题。而 GraphQL 需要动态处理字段，这点不容易做到。幸运的是 Facebook 正在研发一个处理类似问题的可能的解决方案：DataLoader。</p><p>如名字暗示，DataLoader 是一款能让我们从数据库读取数据并让数据能被 GraphQL 处理函数使用的工具。我们使用 DataLoader，而不是直接通过 SQL 查询从数据库获取数据，将 DataLoader 作为代理以减少我们实际需要发送给数据库的 SQL 查询。</p><p>DataLoader 使用批处理和缓存的组合来实现。如果同一个客户端请求会造成多次请求数据库，DataLoader 会整合这些问题并从数据库批量拉取请求数据。DataLoader 会同时缓存这些数据，当有后续请求需要同样资源时可以直接从缓存获取到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;GraphQL是什么&quot;&gt;&lt;a href=&quot;#GraphQL是什么&quot; class=&quot;headerlink&quot; title=&quot;GraphQL是什么&quot;&gt;&lt;/a&gt;GraphQL是什么&lt;/h3&gt;&lt;p&gt;GraphQL 是一门语言。 如果我们传授 GraphQL 语言给一款应用，
      
    
    </summary>
    
    
      <category term="Graph" scheme="http://myqilixiang.github.io/tags/Graph/"/>
    
      <category term="REST" scheme="http://myqilixiang.github.io/tags/REST/"/>
    
  </entry>
  
</feed>
